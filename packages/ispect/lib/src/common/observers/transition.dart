// Generated by Dart Safe Data Class Generator. * Change this header on extension settings *
// ignore_for_file: type=lint

import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:ispect/ispect.dart';
import 'package:ispect/src/common/observers/route_extension.dart';

enum TransitionType {
  push,
  pop,
  replace,
  remove,
  startUserGesture,
  stopUserGesture;

  String get title => switch (this) {
        TransitionType.push => 'Push',
        TransitionType.pop => 'Pop',
        TransitionType.replace => 'Replace',
        TransitionType.remove => 'Remove',
        TransitionType.startUserGesture => 'Start User Gesture',
        TransitionType.stopUserGesture => 'Stop User Gesture',
      };
}

@immutable
class RouteTransition {
  const RouteTransition({
    required this.id,
    required this.from,
    required this.to,
    required this.type,
    required this.timestamp,
    required this.arguments,
  });

  final String id;
  final Route<dynamic>? from;
  final Route<dynamic>? to;
  // enum
  final TransitionType type;
  final DateTime timestamp;
  final Object? arguments;

  static const _equality = DeepCollectionEquality();

  String get transitionText {
    final fromName = from?.routeName;
    final toName = to?.routeName;
    return '$fromName â†’ $toName';
  }

  String? get prettyArguments {
    final args = arguments;
    if (args == null) {
      return null;
    }
    if (args is Map<String, dynamic>) {
      return JsonTruncatorService.pretty(args);
    }
    return args.toString();
  }

  @override
  String toString() => 'RouteTransition('
      'id: $id, '
      'from: $from, '
      'to: $to, '
      'type: $type, '
      'timestamp: $timestamp, '
      'arguments: $arguments'
      ')';

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! RouteTransition) {
      return false;
    }
    return id == other.id &&
        from == other.from &&
        to == other.to &&
        type == other.type &&
        timestamp == other.timestamp &&
        _equality.equals(arguments, other.arguments);
  }

  @override
  int get hashCode => Object.hash(
        id,
        from,
        to,
        type,
        timestamp,
        _equality.hash(arguments),
      );

  RouteTransition copyWith({
    String? id,
    Route<dynamic>? from,
    Route<dynamic>? to,
    TransitionType? type,
    DateTime? timestamp,
    Object? arguments,
  }) =>
      RouteTransition(
        id: id ?? this.id,
        from: from ?? this.from,
        to: to ?? this.to,
        type: type ?? this.type,
        timestamp: timestamp ?? this.timestamp,
        arguments: arguments ?? this.arguments,
      );
}
