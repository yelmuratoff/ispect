// ignore_for_file: use_if_null_to_convert_nulls_to_bools

// Generated by Dart Safe Data Class Generator. * Change this header on extension settings *
// ignore_for_file: type=lint
import 'package:collection/collection.dart';
import 'package:draggable_panel/draggable_panel.dart';
import 'package:flutter/material.dart';
import 'package:ispect/src/common/models/action_item.dart';
import 'package:ispect/src/common/widgets/builder/data_builder.dart';
import 'package:ispect/src/core/res/ispect_callbacks.dart';

/// A configuration class for `ISpect`, defining various options including locale settings,
/// feature toggles, action items, and panel configurations.
///
/// This class allows customization of `ISpect` through parameters such as:
/// - Language settings (`locale`).
/// - Feature toggles (`isLogPageEnabled`, `isPerformanceEnabled`, etc.).
/// - Action items (`actionItems`).
/// - Custom panel items (`panelItems`).
/// - Additional panel buttons (`panelButtons`).
/// - Custom data builder (`itemsBuilder`).
///
/// ### Example Usage:
/// ```dart
/// final options = ISpectOptions(
///   locale: const Locale('en'),
///   isLogPageEnabled: true,
///   isPerformanceEnabled: false,
///   actionItems: [
///     ISpectActionItem(
///       title: 'Clear Logs',
///       icon: Icons.clear_all,
///       onTap: (context) => clearLogs(),
///     ),
///   ],
///   panelItems: [
///     ISpectPanelItem(
///       icon: Icons.bug_report,
///       enableBadge: true,
///       onTap: (context) => showBugReport(context),
///     ),
///   ],
///   panelButtons: [
///     ISpectPanelButtonItem(
///       icon: Icons.settings,
///       label: 'Settings',
///       onTap: (context) => openSettings(context),
///     ),
///   ],
/// );
/// ```
@immutable
final class ISpectOptions {
  const ISpectOptions({
    required this.observer,
    this.locale = const Locale('en'),
    this.isLogPageEnabled = true,
    this.isPerformanceEnabled = true,
    this.isInspectorEnabled = true,
    this.isFeedbackEnabled = true,
    this.isColorPickerEnabled = true,
    this.isThemeSchemaEnabled = true,
    this.actionItems = const [],
    this.panelItems = const [],
    this.panelButtons = const [],
    this.itemsBuilder,
    this.onShare,
    this.onOpenFile,
    this.onLoadLogContent,
  });

  /// The locale setting for `ISpect`, defining the language and region preferences.
  ///
  /// Defaults to `Locale('en')`.
  final Locale locale;

  /// A navigator observer to track navigation events within the app.
  final NavigatorObserver? observer;

  /// Controls visibility of the log viewer page.
  ///
  /// When `true`, the log page will be available in the ISpect interface.
  /// Defaults to `true`.
  final bool isLogPageEnabled;

  /// Controls visibility of performance monitoring tools.
  ///
  /// When `true`, performance monitoring features will be available.
  /// Defaults to `true`.
  final bool isPerformanceEnabled;

  /// Controls visibility of the widget inspector.
  ///
  /// When `true`, the widget inspector will be available for debugging UI.
  /// Defaults to `true`.
  final bool isInspectorEnabled;

  /// Controls visibility of the feedback reporting tool.
  ///
  /// When `true`, users can access feedback and reporting features.
  /// Defaults to `true`.
  final bool isFeedbackEnabled;

  /// Controls visibility of the color picker tool.
  ///
  /// When `true`, the color picker utility will be available.
  /// Defaults to `true`.
  final bool isColorPickerEnabled;

  /// Controls visibility of the theme schema inspector.
  ///
  /// When `true`, theme and color scheme inspection tools will be available.
  /// Defaults to `true`.
  final bool isThemeSchemaEnabled;

  /// A list of custom action items that can be triggered in `ISpect`.
  ///
  /// Each action item contains:
  /// - `title`: The display name of the action
  /// - `icon`: The icon representing the action
  /// - `onTap`: A callback function triggered when the action is executed
  ///
  /// This typically includes debugging, logging, or inspection actions.
  final List<ISpectActionItem> actionItems;

  /// A list of panel items displayed in the `ISpect` interface.
  ///
  /// Each panel item is an `ISpectPanelItem` with the following properties:
  /// - `icon`: The icon representing the panel item
  /// - `enableBadge`: A flag to determine if a notification badge should be shown
  /// - `onTap`: A callback function triggered when the item is tapped
  final List<DraggablePanelItem> panelItems;

  /// A list of panel buttons for additional controls in the `ISpect` interface.
  ///
  /// Each panel button is an `ISpectPanelButtonItem` with the following properties:
  /// - `icon`: The button's icon
  /// - `label`: The text label displayed for the button
  /// - `onTap`: A callback function triggered when the button is tapped
  final List<DraggablePanelButtonItem> panelButtons;

  /// A builder for customizing the data displayed in the `ISpect` screen.
  ///
  /// When provided, this builder allows for custom rendering of data
  /// within the ISpect interface, enabling advanced customization scenarios.
  final ISpectifyDataBuilder? itemsBuilder;

  /// Custom handler for share actions triggered inside ISpect.
  ///
  /// When provided, built-in share buttons delegate to this callback instead of
  /// relying on external packages. If omitted, share-related UI is hidden.
  final ISpectShareCallback? onShare;

  /// Custom handler for file opening actions triggered inside ISpect.
  ///
  /// When provided, locations that previously relied on external packages will
  /// call this callback with a file system path. UI that requires it is hidden
  /// when no callback is supplied.
  final ISpectOpenFileCallback? onOpenFile;

  /// Custom loader invoked when the log viewer needs raw content from a file.
  ///
  /// When omitted, ISpect relies solely on the paste flow. Return `null` to
  /// cancel the loading operation without showing an error.
  final ISpectLoadLogContentCallback? onLoadLogContent;

  /// Creates a new `ISpectOptions` instance with updated values while retaining
  /// existing ones where not specified.
  ///
  /// All parameters are optional and when provided will override the corresponding
  /// values in the current instance.
  ///
  /// ### Example Usage:
  /// ```dart
  /// final updatedOptions = options.copyWith(
  ///   locale: const Locale('es'),
  ///   isLogPageEnabled: false,
  /// );
  /// ```
  ISpectOptions copyWith({
    Locale? locale,
    NavigatorObserver? observer,
    bool? isLogPageEnabled,
    bool? isPerformanceEnabled,
    bool? isInspectorEnabled,
    bool? isFeedbackEnabled,
    bool? isColorPickerEnabled,
    bool? isThemeSchemaEnabled,
    List<ISpectActionItem>? actionItems,
    List<DraggablePanelItem>? panelItems,
    List<DraggablePanelButtonItem>? panelButtons,
    ISpectifyDataBuilder? itemsBuilder,
    ISpectShareCallback? onShare,
    ISpectOpenFileCallback? onOpenFile,
    ISpectLoadLogContentCallback? onLoadLogContent,
  }) {
    return ISpectOptions(
      locale: locale ?? this.locale,
      observer: observer ?? this.observer,
      isLogPageEnabled: isLogPageEnabled ?? this.isLogPageEnabled,
      isPerformanceEnabled: isPerformanceEnabled ?? this.isPerformanceEnabled,
      isInspectorEnabled: isInspectorEnabled ?? this.isInspectorEnabled,
      isFeedbackEnabled: isFeedbackEnabled ?? this.isFeedbackEnabled,
      isColorPickerEnabled: isColorPickerEnabled ?? this.isColorPickerEnabled,
      isThemeSchemaEnabled: isThemeSchemaEnabled ?? this.isThemeSchemaEnabled,
      actionItems: actionItems ?? this.actionItems,
      panelItems: panelItems ?? this.panelItems,
      panelButtons: panelButtons ?? this.panelButtons,
      itemsBuilder: itemsBuilder ?? this.itemsBuilder,
      onShare: onShare ?? this.onShare,
      onOpenFile: onOpenFile ?? this.onOpenFile,
      onLoadLogContent: onLoadLogContent ?? this.onLoadLogContent,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    final listEquals = const DeepCollectionEquality().equals;

    return other is ISpectOptions &&
        other.locale == locale &&
        other.observer == observer &&
        other.isLogPageEnabled == isLogPageEnabled &&
        other.isPerformanceEnabled == isPerformanceEnabled &&
        other.isInspectorEnabled == isInspectorEnabled &&
        other.isFeedbackEnabled == isFeedbackEnabled &&
        other.isColorPickerEnabled == isColorPickerEnabled &&
        other.isThemeSchemaEnabled == isThemeSchemaEnabled &&
        listEquals(other.actionItems, actionItems) &&
        listEquals(other.panelItems, panelItems) &&
        listEquals(other.panelButtons, panelButtons) &&
        other.itemsBuilder == itemsBuilder &&
        other.onShare == onShare &&
        other.onOpenFile == onOpenFile &&
        other.onLoadLogContent == onLoadLogContent;
  }

  @override
  int get hashCode {
    return locale.hashCode ^
        observer.hashCode ^
        isLogPageEnabled.hashCode ^
        isPerformanceEnabled.hashCode ^
        isInspectorEnabled.hashCode ^
        isFeedbackEnabled.hashCode ^
        isColorPickerEnabled.hashCode ^
        isThemeSchemaEnabled.hashCode ^
        actionItems.hashCode ^
        panelItems.hashCode ^
        panelButtons.hashCode ^
        itemsBuilder.hashCode ^
        onShare.hashCode ^
        onOpenFile.hashCode ^
        onLoadLogContent.hashCode;
  }

  @override
  String toString() {
    return '''ISpectOptions(
      locale: $locale,
      observer: $observer,
      isLogPageEnabled: $isLogPageEnabled,
      isPerformanceEnabled: $isPerformanceEnabled,
      isInspectorEnabled: $isInspectorEnabled,
      isFeedbackEnabled: $isFeedbackEnabled,
      isColorPickerEnabled: $isColorPickerEnabled,
      isThemeSchemaEnabled: $isThemeSchemaEnabled,
      actionItems: $actionItems,
      panelItems: $panelItems,
      panelButtons: $panelButtons,
      itemsBuilder: $itemsBuilder,
      onShare: $onShare,
      onOpenFile: $onOpenFile,
      onLoadLogContent: $onLoadLogContent,
      )''';
  }
}
