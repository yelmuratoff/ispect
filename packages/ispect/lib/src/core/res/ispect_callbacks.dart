// Generated by Dart Safe Data Class Generator. * Change this header on extension settings *
// ignore_for_file: type=lint
import 'dart:async';

import 'package:collection/collection.dart';
import 'package:flutter/widgets.dart';

typedef ISpectShareCallback = Future<void> Function(ISpectShareRequest request);

typedef ISpectOpenFileCallback = Future<void> Function(String path);

typedef ISpectLoadLogContentCallback = Future<String?> Function(
  BuildContext context,
);

/// Describes content to pass into a custom share handler.
@immutable
final class ISpectShareRequest {
  const ISpectShareRequest({
    this.subject,
    this.text,
    this.filePaths = const [],
  });

  final String? subject;
  final String? text;
  final List<String> filePaths;

  bool get hasFiles => filePaths.isNotEmpty;

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    final listEquals = const DeepCollectionEquality().equals;

    return other is ISpectShareRequest &&
        other.subject == subject &&
        other.text == text &&
        listEquals(other.filePaths, filePaths);
  }

  @override
  int get hashCode => subject.hashCode ^ text.hashCode ^ filePaths.hashCode;

  @override
  String toString() => '''ISpectShareRequest(
      subject: $subject,
      text: $text,
      filePaths: $filePaths,
      )''';

  ISpectShareRequest copyWith({
    String? subject,
    String? text,
    List<String>? filePaths,
  }) {
    return ISpectShareRequest(
      subject: subject ?? this.subject,
      text: text ?? this.text,
      filePaths: filePaths ?? this.filePaths,
    );
  }
}
