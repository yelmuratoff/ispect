// Generated by Dart Safe Data Class Generator. * Change this header on extension settings *
// ignore_for_file: type=lint
import 'package:flutter/foundation.dart';
import 'package:ispect/ispect.dart';

/// Example demonstrating universal logs file creation across all platforms.
///
/// This example shows how to use the new logs file system that works on:
/// - Android, iOS, macOS, Windows, Linux (File system)
/// - Web (Browser Blob API)
class LogsFileExample {
  /// Creates a log file and handles it appropriately for each platform.
  static Future<void> createAndHandleLogsFile() async {
    try {
      // Step 1: Create logs content
      final logsContent =
          '''
=== ISpect Application Logs ===
Timestamp: ${DateTime.now()}
Platform: ${defaultTargetPlatform.name}
Web: $kIsWeb

[INFO] Application started successfully
[DEBUG] User interaction logged
[ERROR] Sample error for demonstration
[INFO] Logs file creation completed
      '''
              .trim();

      // Step 2: Create the log file (works on ALL platforms)
      final logFile = await LogsFileFactory.createLogsFile(
        logsContent,
        fileName: 'ispect_demo_logs',
      );

      // Step 3: Get the handler for additional operations
      final handler = LogsFileFactory.create();

      // Step 4: Handle platform-specific opera tions
      if (kIsWeb) {
        // Web platform handling
        debugPrint('‚úÖ Web: Log file created as Blob');
        final blobUrl = handler.getFilePath(logFile);
        debugPrint('üìÅ Blob URL: $blobUrl');

        // Trigger automatic download for web users
        if (kIsWeb && handler.runtimeType.toString() == 'WebLogsFile') {
          (handler as dynamic).downloadFile(logFile);
          debugPrint('‚¨áÔ∏è  Download triggered for user');
        }
      } else {
        // Native platforms handling
        debugPrint('‚úÖ Native: Log file saved to filesystem');
        final filePath = handler.getFilePath(logFile);
        debugPrint('üìÅ File path: $filePath');

        // Get file size
        final fileSize = await handler.getFileSize(logFile);
        debugPrint('üìä File size: $fileSize bytes');
      }

      // Step 5: Demonstrate reading the file content
      final readContent = await handler.readAsString(logFile);
      final contentPreview = readContent.length > 100
          ? '${readContent.substring(0, 100)}...'
          : readContent;
      ISpect.logger.info('üìÑ Content preview: $contentPreview');
    } catch (e, st) {
      ISpect.logger.handle(
        message: '‚ùå Error creating logs file',
        exception: e,
        stackTrace: st,
      );
    }
  }

  /// Demonstrates creating multiple log files with different names.
  static Future<void> createMultipleLogsFiles() async {
    const logTypes = ['errors', 'performance', 'user_actions'];

    for (final logType in logTypes) {
      try {
        final content = 'Sample $logType logs\nGenerated at ${DateTime.now()}';
        final logFile = await LogsFileFactory.createLogsFile(
          content,
          fileName: 'ispect_${logType}_logs',
        );

        final handler = LogsFileFactory.create();
        final path = handler.getFilePath(logFile);

        ISpect.logger.info('‚úÖ Created $logType log file: ${path.split('/').last}');
      } catch (e, st) {
        ISpect.logger.handle(
          message: '‚ùå Failed to create $logType log file',
          exception: e,
          stackTrace: st,
        );
      }
    }
  }

  /// Demonstrates proper cleanup of log files.
  static Future<void> demonstrateCleanup() async {
    try {
      // Create a temporary log file
      final logFile = await LogsFileFactory.createLogsFile(
        'Temporary log content for cleanup demo',
        fileName: 'temp_cleanup_demo',
      );

      final handler = LogsFileFactory.create();
      debugPrint('üìÑ Created temporary file');

      // Clean up the file
      await handler.deleteFile(logFile);
      debugPrint('üóëÔ∏è  File cleaned up successfully');
    } catch (e, st) {
      ISpect.logger.handle(
        message: '‚ùå Cleanup error',
        exception: e,
        stackTrace: st,
      );
    }
  }
}

/// Usage example:
/// ```dart
/// // In your app:
/// await LogsFileExample.createAndHandleLogsFile();
/// await LogsFileExample.createMultipleLogsFiles();
/// await LogsFileExample.demonstrateCleanup();
/// ```
