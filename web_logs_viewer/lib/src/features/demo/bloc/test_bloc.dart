// Generated by Dart Safe Data Class Generator. * Change this header on extension settings *
// ignore_for_file: type=lint
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

part 'test_state.dart';

class TestBloc extends Bloc<TestEvent, TestState> {
  TestBloc() : super(TestInitial()) {
    on<LoadEvent>((event, emit) async {
      emit(TestLoading());
      await Future.delayed(const Duration(seconds: 1));
      emit(TestLoaded(event.data));
    });
    on<LoadEventWithError>((event, emit) async {
      emit(TestLoading());
      await Future.delayed(const Duration(seconds: 1));
      throw Exception('Simulated error');
    });
  }

  void load({required String data}) {
    add(LoadEvent(data));
  }

  void loadWithError() {
    add(const LoadEventWithError('error'));
  }
}

sealed class TestEvent {
  const TestEvent();
}

@immutable
class LoadEvent extends TestEvent {
  final String data;
  const LoadEvent(this.data);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is LoadEvent && other.data == data;
  }

  @override
  int get hashCode => data.hashCode;
}

@immutable
class LoadEventWithError extends TestEvent {
  final String data;
  const LoadEventWithError(this.data);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is LoadEvent && other.data == data;
  }

  @override
  int get hashCode => data.hashCode;
}
