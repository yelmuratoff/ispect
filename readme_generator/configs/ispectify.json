{
   "package_name": "ispectify",
   "title": "ISpectify",
   "description": "Foundation logging system for ISpect toolkit (based on Talker)",
   "overview": "is the foundation logging system that powers the ISpect debugging toolkit.",
   "features": [
      "📝 **Structured Logging**: Advanced logging with categorization and filtering",
      "🎨 **Custom Log Types**: Define your own log types with custom colors and icons",
      "🔍 **Real-time Filtering**: Filter logs by type, level, and custom criteria",
      "📊 **Performance Monitoring**: Track application performance metrics",
      "💾 **Export Functionality**: Export logs for analysis and debugging",
      "🔧 **Easy Integration**: Simple setup with minimal configuration"
   ],
   "custom_overview_section": "<div align=\"center\">\n\n📝 **Logging** • 🔍 **Filtering** • 📊 **Monitoring** • 💾 **Export**\n\n</div>\n\nISpectify provides a robust logging foundation that integrates seamlessly with the ISpect ecosystem. Built on top of the proven Talker logging library, it offers advanced features for debugging and monitoring Flutter applications.",
   "usage_example": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:ispect/ispect.dart';\n\nclass CustomLog extends ISpectifyData {\n  CustomLog(\n    String super.message,\n  ) : super(\n          key: 'custom_log',\n          title: 'Custom Log',\n        );\n}\n\nvoid main() {\n  // Initialize ISpectify for logging\n  final ISpectify logger = ISpectify(\n    logger: ISpectifyLogger(\n        settings: LoggerSettings(\n      enableColors: false,\n    )),\n    options: ISpectifyOptions(\n      enabled: true,\n      useHistory: true,\n      useConsoleLogs: true,\n      maxHistoryItems: 10000,\n      logTruncateLength: 10000,\n      titles: {\n        'error': 'Error Logs',\n        'info': 'Info Logs',\n        'debug': 'Debug Logs',\n      },\n      colors: {\n        'error': AnsiPen()..red(),\n        'info': AnsiPen()..blue(),\n        'debug': AnsiPen()..white(),\n      },\n    ),\n  );\n\n  logger.info('ISpectify initialized successfully');\n\n  // Wrap your app with ISpect\n  ISpect.run(\n    () => runApp(MyApp()),\n    logger: logger,\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ISpectify Example')),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              ElevatedButton(\n                onPressed: () {\n                  ISpect.logger.info('Info log message');\n                },\n                child: const Text('Log Info'),\n              ),\n              ElevatedButton(\n                onPressed: () {\n                  ISpect.logger.logCustom(CustomLog('Custom log message'));\n                },\n                child: const Text('Log Custom'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpectify serves as the logging foundation for the ISpect ecosystem:\n\n| Component | Description |\n|-----------|-----------|\n| **Core Logger** | Based on Talker with enhanced features |\n| **Log Filtering** | Advanced filtering and search capabilities |\n| **Performance Tracking** | Built-in performance monitoring |\n| **Export System** | Log export and analysis tools |\n| **Integration Layer** | Seamless integration with ISpect toolkit |",
   "custom_sections": "## 🔧 Configuration\n\n### Settings\n\n```dart\nfinal logger = ISpectify(\n    logger: ISpectifyLogger(\n        settings: LoggerSettings(\n      enableColors: false,\n    )),\n    options: ISpectifyOptions(\n      enabled: true,\n      useHistory: true,\n      useConsoleLogs: true,\n      maxHistoryItems: 10000,\n      logTruncateLength: 10000,\n      titles: {\n        'error': 'Error Logs',\n        'info': 'Info Logs',\n        'debug': 'Debug Logs',\n      },\n      colors: {\n        'error': AnsiPen()..red(),\n        'info': AnsiPen()..blue(),\n        'debug': AnsiPen()..white(),\n      },\n    ),\n  );\n```\n\n### Custom Log Types\n\n```dart\nclass CustomLog extends ISpectifyData {\n  CustomLog(\n    String super.message,\n  ) : super(\n          key: 'custom_log',\n          title: 'Custom Log',\n        );\n}\n\nlogger.logCustom(CustomLog('This is a custom log message'));\n```",
   "advanced_configuration": "",
   "examples_section": "## 📚 Examples\n\nSee the [example/](example/) directory for usage examples and integration patterns.",
   "related_packages": "## 🔗 Related Packages\n\n- [ispect](../ispect) - Main debugging interface\n- [ispectify_dio](../ispectify_dio) - Dio HTTP client integration\n- [ispectify_http](../ispectify_http) - Standard HTTP client integration\n- [ispectify_bloc](../ispectify_bloc) - BLoC state management integration"
}