{
   "package_name": "ispectify",
   "title": "ISpectify",
   "description": "Foundation logging system for ISpect toolkit (based on Talker)",
   "overview": "is the foundation logging system that powers the ISpect debugging toolkit.",
   "features": [
      "Structured Logging: Advanced logging with categorization and filtering",
      "Custom Log Types: Define your own log types with custom colors and icons",
      "Real-time Filtering: Filter logs by type, level, and custom criteria",
      "Performance Monitoring: Track application performance metrics",
      "Export Functionality: Export logs for analysis and debugging",
      "Easy Integration: Simple setup with minimal configuration"
   ],
   "custom_overview_section": "ISpectify is the logging foundation for the ISpect ecosystem. It builds on the Talker logging library and adds features for debugging and monitoring Flutter applications.",
   "usage_example": "```dart\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:ispect/ispect.dart';\n\n// Use dart define to control ISpectify inclusion\nconst bool kEnableISpectify = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n\nclass CustomLog extends ISpectifyData {\n  CustomLog(\n    String super.message,\n  ) : super(\n          key: 'custom_log',\n          title: 'Custom Log',\n        );\n}\n\nvoid main() {\n  ISpectify? logger;\n  \n  if (kEnableISpectify) {\n    // Initialize ISpectify only in development/staging\n    logger = ISpectify(\n      logger: ISpectifyLogger(\n          settings: LoggerSettings(\n        enableColors: false,\n      )),\n      options: ISpectifyOptions(\n        enabled: true,\n        useHistory: true,\n        useConsoleLogs: true,\n        maxHistoryItems: 10000,\n        logTruncateLength: 10000,\n        titles: {\n          'error': 'Error Logs',\n          'info': 'Info Logs',\n          'debug': 'Debug Logs',\n        },\n        colors: {\n          'error': AnsiPen()..red(),\n          'info': AnsiPen()..blue(),\n          'debug': AnsiPen()..white(),\n        },\n      ),\n    );\n\n    logger.info('ISpectify initialized successfully');\n\n    // Wrap your app with ISpect\n    ISpect.run(\n      () => runApp(MyApp()),\n      logger: logger,\n    );\n  } else {\n    // Production run without ISpectify\n    runApp(MyApp());\n  }\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ISpectify Example')),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              ElevatedButton(\n                onPressed: () {\n                  if (kEnableISpectify) {\n                    ISpect.logger.info('Info log message');\n                  }\n                },\n                child: const Text('Log Info'),\n              ),\n              ElevatedButton(\n                onPressed: () {\n                  if (kEnableISpectify) {\n                    ISpect.logger.logCustom(CustomLog('Custom log message'));\n                  }\n                },\n                child: const Text('Log Custom'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpectify serves as the logging foundation for the ISpect ecosystem:\n\n| Component | Description |\n|-----------|-----------|\n| **Core Logger** | Based on Talker with enhanced features |\n| **Log Filtering** | Advanced filtering and search capabilities |\n| **Performance Tracking** | Built-in performance monitoring |\n| **Export System** | Log export and analysis tools |\n| **Integration Layer** | Seamless integration with ISpect toolkit |",
   "custom_sections": "## Configuration\n\n### Settings\n\n```dart\nfinal logger = ISpectify(\n    logger: ISpectifyLogger(\n        settings: LoggerSettings(\n      enableColors: false,\n    )),\n    options: ISpectifyOptions(\n      enabled: true,\n      useHistory: true,\n      useConsoleLogs: true,\n      maxHistoryItems: 10000,\n      logTruncateLength: 10000,\n      titles: {\n        'error': 'Error Logs',\n        'info': 'Info Logs',\n        'debug': 'Debug Logs',\n      },\n      colors: {\n        'error': AnsiPen()..red(),\n        'info': AnsiPen()..blue(),\n        'debug': AnsiPen()..white(),\n      },\n    ),\n  );\n```\n\n### Custom Log Types\n\n```dart\nclass CustomLog extends ISpectifyData {\n  CustomLog(\n    String super.message,\n  ) : super(\n          key: 'custom_log',\n          title: 'Custom Log',\n        );\n}\n\nlogger.logCustom(CustomLog('This is a custom log message'));\n```",
   "advanced_configuration": "## Advanced Configuration\n\n### Production-Safe Logging\n\n```dart\n// Create a logger wrapper that respects environment settings\nclass SafeLogger {\n  static const bool _isEnabled = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n  static ISpectify? _instance;\n  \n  static ISpectify? get instance {\n    if (!_isEnabled) return null;\n    return _instance ??= _createLogger();\n  }\n  \n  static ISpectify _createLogger() {\n    return ISpectify(\n      logger: ISpectifyLogger(\n        settings: LoggerSettings(\n          enableColors: kDebugMode, // Disable colors in headless/CI for cleaner output\n        )\n      ),\n      options: ISpectifyOptions(\n        enabled: true,\n        useHistory: true,\n        useConsoleLogs: kDebugMode,\n        maxHistoryItems: 10000,\n        logTruncateLength: 10000,\n      ),\n    );\n  }\n  \n  // Safe logging methods that check environment\n  static void info(String message) {\n    instance?.info(message);\n  }\n  \n  static void error(String message, [Object? error, StackTrace? stackTrace]) {\n    instance?.error(message, error, stackTrace);\n  }\n  \n  static void debug(String message) {\n    instance?.debug(message);\n  }\n}\n```\n\n### Custom Configuration\n\n```dart\n// Environment-specific logger configuration\nISpectify createLogger() {\n  const environment = String.fromEnvironment('ENVIRONMENT', defaultValue: 'development');\n  final bool isProd = environment == 'production';\n  return ISpectify(\n    logger: ISpectifyLogger(\n      settings: LoggerSettings(\n        enableColors: !isProd,\n        lineLength: environment == 'development' ? 120 : 80,\n      )\n    ),\n    options: ISpectifyOptions(\n      enabled: !isProd,\n      useHistory: true,\n      useConsoleLogs: environment == 'development',\n      maxHistoryItems: environment == 'development' ? 10000 : 2000,\n      logTruncateLength: environment == 'development' ? 10000 : 2000,\n      titles: {\n        'error': 'Errors',\n        'warning': 'Warnings', \n        'info': 'Information',\n        'debug': 'Debug Info',\n      },\n    ),\n  );\n}\n```\n\n### Memory & History Tuning\n\nLarge history buffers increase memory usage. Adjust for CI, tests, or low-end devices:\n\n```dart\nISpectifyOptions(\n  maxHistoryItems: 2000, // Lower for constrained environments\n  logTruncateLength: 4000, // Shorter entries reduce memory footprint\n);\n```\n\n### Redaction Guidance\n\nPrefer key-based masking (e.g. 'authorization', 'token', 'apiKey'). Avoid hardcoding actual secret values in ignoreValues; use placeholder markers instead. Disable redaction only with synthetic or non-sensitive data.",
   "examples_section": "## Examples\n\nSee the [example/](example/) directory for usage examples and integration patterns.",
   "related_packages": "## Related Packages\n\n- [ispect](../ispect) - Main debugging interface\n- [ispectify_dio](../ispectify_dio) - Dio HTTP client integration\n- [ispectify_http](../ispectify_http) - Standard HTTP client integration\n- [ispectify_bloc](../ispectify_bloc) - BLoC state management integration"
}