{
   "package_name": "ispectify_http",
   "title": "ISpectify HTTP",
   "description": "HTTP interceptor integration for ISpectify logging system using http_interceptor package",
   "overview": "provides seamless integration between the http_interceptor package and the ISpectify logging system.",
   "features": [
      "🌐 **HTTP Request Logging**: Automatic logging of all HTTP requests",
      "📊 **Response Tracking**: Detailed response logging with timing information",
      "❌ **Error Handling**: Comprehensive error logging with stack traces",
      "🔍 **Request Inspection**: Headers, body, and parameter logging",
      "⚡ **Performance Metrics**: Request/response timing and size tracking",
      "🎛️ **Lightweight**: Minimal overhead using http_interceptor package"
   ],
   "custom_overview_section": "<div align=\"center\">\n\n🌐 **HTTP Logging** • 📊 **Response Tracking** • ❌ **Error Handling** • ⚡ **Performance**\n\n</div>\n\nEnhance your HTTP debugging workflow by automatically capturing and logging all HTTP client interactions using the http_interceptor package. Provides seamless integration with Dart's HTTP package through interceptors for comprehensive request and response monitoring.",
   "usage_example": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:ispect/ispect.dart';\nimport 'package:http_interceptor/http_interceptor.dart' as http_interceptor;\nimport 'package:ispectify_http/ispectify_http.dart';\n\nfinal http_interceptor.InterceptedClient client =\n    http_interceptor.InterceptedClient.build(interceptors: []);\n\nvoid main() {\n  final ISpectify iSpectify = ISpectifyFlutter.init();\n\n  ISpect.run(\n    () => runApp(MyApp()),\n    logger: iSpectify,\n    onInit: () {\n      // Add ISpectify HTTP interceptor\n      client.interceptors.add(\n        ISpectifyHttpLogger(iSpectify: iSpectify),\n      );\n    },\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ISpectify HTTP Example')),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              ElevatedButton(\n                onPressed: () async {\n                  // All HTTP requests will be automatically logged\n                  await client.get(\n                    Uri.parse('https://jsonplaceholder.typicode.com/posts/1'),\n                  );\n                },\n                child: const Text('Send HTTP Request'),\n              ),\n              const SizedBox(height: 16),\n              ElevatedButton(\n                onPressed: () async {\n                  // Error requests are also logged\n                  await client.get(\n                    Uri.parse('https://jsonplaceholder.typicode.com/invalid'),\n                  );\n                },\n                child: const Text('Send Error Request'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpectifyHttp integrates with the standard HTTP client through interceptors:\n\n| Component | Description |\n|-----------|-----------|\n| **HTTP Interceptor** | Captures HTTP requests and responses |\n| **Request Logger** | Logs request details (headers, body, params) |\n| **Response Logger** | Logs response data and timing |\n| **Error Handler** | Captures and logs HTTP errors |\n| **Performance Tracker** | Measures request/response times |",
   "custom_sections": "## 🔧 Configuration Options\n\n### Basic Setup\n\n```dart\nfinal http_interceptor.InterceptedClient client =\n    http_interceptor.InterceptedClient.build(interceptors: []);\n\n// Initialize in ISpect.run onInit callback\nISpect.run(\n  () => runApp(MyApp()),\n  logger: iSpectify,\n  onInit: () {\n    client.interceptors.add(\n      ISpectifyHttpLogger(iSpectify: iSpectify),\n    );\n  },\n);\n```\n\n### File Upload Example\n\n```dart\n// Upload file using MultipartRequest\nfinal List<int> bytes = [1, 2, 3]; // File data\nconst String filename = 'file.txt';\n\nfinal http_interceptor.MultipartRequest request =\n    http_interceptor.MultipartRequest(\n  'POST',\n  Uri.parse('https://api.example.com/upload'),\n);\n\nrequest.files.add(http_interceptor.MultipartFile.fromBytes(\n  'file', // Field name\n  bytes,\n  filename: filename,\n));\n\n// Send request - will be automatically logged\nclient.send(request);\n```",
   "advanced_configuration": "",
   "examples_section": "## 📚 Examples\n\nSee the [example/](example/) directory for complete integration examples with different HTTP client configurations.",
   "related_packages": "## 🔗 Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispectify_dio](../ispectify_dio) - Dio HTTP client integration\n- [ispect](../ispect) - Main debugging interface\n- [http_interceptor](https://pub.dev/packages/http_interceptor) - HTTP interceptor package for Dart"
}