{
   "package_name": "ispectify_http",
   "title": "ISpectify HTTP",
   "description": "Standard HTTP client integration for ISpectify logging system",
   "overview": "provides seamless integration between Dart's standard HTTP client and the ISpectify logging system.",
   "features": [
      "🌐 **HTTP Request Logging**: Automatic logging of all HTTP requests",
      "📊 **Response Tracking**: Detailed response logging with timing information",
      "❌ **Error Handling**: Comprehensive error logging with stack traces",
      "🔍 **Request Inspection**: Headers, body, and parameter logging",
      "⚡ **Performance Metrics**: Request/response timing and size tracking",
      "🎛️ **Lightweight**: Minimal overhead with the standard HTTP client"
   ],
   "custom_overview_section": "<div align=\"center\">\n\n🌐 **HTTP Logging** • 📊 **Response Tracking** • ❌ **Error Handling** • ⚡ **Performance**\n\n</div>\n\nEnhance your HTTP debugging workflow by automatically capturing and logging all standard HTTP client interactions. Ideal for applications using Dart's built-in HTTP client or when you need a lightweight HTTP logging solution.",
   "usage_example": "```dart\nimport 'package:http/http.dart' as http;\nimport 'package:ispectify_http/ispectify_http.dart';\nimport 'package:ispectify/ispectify.dart';\n\nvoid main() {\n  final ispectify = ISpectify();\n  \n  // Create HTTP client with ISpectify interceptor\n  final client = InterceptedClient.build(\n    interceptors: [\n      ISpectifyHttpInterceptor(\n        ispectify: ispectify,\n        settings: ISpectifyHttpSettings(\n          printRequestHeaders: true,\n          printResponseHeaders: true,\n          printRequestBody: true,\n          printResponseBody: true,\n        ),\n      ),\n    ],\n  );\n  \n  // All HTTP requests will be automatically logged\n  final response = await client.get(\n    Uri.parse('https://api.example.com/data'),\n  );\n  \n  // Don't forget to close the client\n  client.close();\n}\n```",
   "architecture_note": "ISpectifyHttp integrates with the standard HTTP client through interceptors:\n\n| Component | Description |\n|-----------|-----------|\n| **HTTP Interceptor** | Captures HTTP requests and responses |\n| **Request Logger** | Logs request details (headers, body, params) |\n| **Response Logger** | Logs response data and timing |\n| **Error Handler** | Captures and logs HTTP errors |\n| **Performance Tracker** | Measures request/response times |",
   "custom_sections": "## 🔧 Configuration Options\n\n### Basic Configuration\n\n```dart\nfinal client = InterceptedClient.build(\n  interceptors: [\n    ISpectifyHttpInterceptor(\n      ispectify: ispectify,\n      settings: ISpectifyHttpSettings(\n        // Request logging\n        printRequestHeaders: true,\n        printRequestBody: true,\n        \n        // Response logging\n        printResponseHeaders: true,\n        printResponseBody: true,\n        \n        // Error handling\n        printErrorDetails: true,\n        \n        // Performance\n        trackRequestTime: true,\n      ),\n    ),\n  ],\n);\n```\n\n### Advanced Filtering\n\n```dart\nfinal client = InterceptedClient.build(\n  interceptors: [\n    ISpectifyHttpInterceptor(\n      ispectify: ispectify,\n      settings: ISpectifyHttpSettings(\n        // Filter sensitive headers\n        headerFilter: (headers) => Map.from(headers)\n          ..remove('authorization'),\n        \n        // Filter request bodies\n        requestBodyFilter: (body) {\n          if (body.contains('password')) {\n            return body.replaceAll(RegExp(r'\"password\":\"[^\"]*\"'), '\"password\":\"***\"');\n          }\n          return body;\n        },\n        \n        // Custom log levels\n        requestLogLevel: LogLevel.debug,\n        responseLogLevel: LogLevel.info,\n        errorLogLevel: LogLevel.error,\n      ),\n    ),\n  ],\n);\n```",
   "advanced_configuration": "## ⚙️ Advanced Features\n\n### Custom Log Formatting\n\n```dart\nfinal client = InterceptedClient.build(\n  interceptors: [\n    ISpectifyHttpInterceptor(\n      ispectify: ispectify,\n      settings: ISpectifyHttpSettings(\n        requestFormatter: (request) => 'HTTP ${request.method} ${request.url}',\n        responseFormatter: (response) => 'Response ${response.statusCode} (${response.body.length} bytes)',\n      ),\n    ),\n  ],\n);\n```\n\n### Environment-based Configuration\n\n```dart\nfinal client = InterceptedClient.build(\n  interceptors: [\n    ISpectifyHttpInterceptor(\n      ispectify: ispectify,\n      settings: kDebugMode \n        ? ISpectifyHttpSettings.debug() // Full logging in debug\n        : ISpectifyHttpSettings.production(), // Minimal logging in production\n    ),\n  ],\n);\n```\n\n### Multiple HTTP Clients\n\n```dart\n// API client\nfinal apiClient = InterceptedClient.build(\n  interceptors: [\n    ISpectifyHttpInterceptor(\n      ispectify: ispectify,\n      tag: 'API',\n    ),\n  ],\n);\n\n// Analytics client\nfinal analyticsClient = InterceptedClient.build(\n  interceptors: [\n    ISpectifyHttpInterceptor(\n      ispectify: ispectify,\n      tag: 'Analytics',\n    ),\n  ],\n);\n```",
   "examples_section": "## 📚 Examples\n\nSee the [example/](example/) directory for complete integration examples with different HTTP client configurations.",
   "related_packages": "## 🔗 Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispectify_dio](../ispectify_dio) - Dio HTTP client integration\n- [ispect](../ispect) - Main debugging interface\n- [http](https://pub.dev/packages/http) - Standard HTTP client for Dart"
}