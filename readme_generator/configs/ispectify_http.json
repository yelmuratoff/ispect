{
   "package_name": "ispectify_http",
   "title": "ISpectify HTTP",
   "description": "HTTP interceptor integration for ISpectify logging system using http_interceptor package",
   "tldr": "Monitor standard HTTP client requests/responses with redaction & timing.",
   "overview": "integrates the http_interceptor package with the ISpectify logging system.",
   "features": [
      "HTTP Request Logging: Automatic logging of all HTTP requests",
      "Response Tracking: Detailed response logging with timing information",
      "Error Handling: Comprehensive error logging with stack traces",
      "Request Inspection: Headers, body, and parameter logging",
      "Sensitive Data Redaction: Centralized redaction for headers and bodies (enabled by default, configurable)",
      "Performance Metrics: Request/response timing and size tracking",
      "Lightweight: Minimal overhead using http_interceptor package"
   ],
   "custom_overview_section": "ISpectifyHttp integrates the http_interceptor package with the ISpectify logging system for HTTP request monitoring.",
   "usage_example": "```dart\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:ispect/ispect.dart';\nimport 'package:http_interceptor/http_interceptor.dart' as http_interceptor;\nimport 'package:ispectify_http/ispectify_http.dart';\n\n// Use dart define to control ISpectify HTTP integration\nconst bool kEnableISpectHttp = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n\nfinal http_interceptor.InterceptedClient client =\n    http_interceptor.InterceptedClient.build(interceptors: []);\n\nvoid main() {\n  if (kEnableISpectHttp) {\n    _initializeWithISpect();\n  } else {\n    // Production initialization without ISpect\n    runApp(MyApp());\n  }\n}\n\nvoid _initializeWithISpect() {\n  final ISpectify iSpectify = ISpectifyFlutter.init();\n\n  ISpect.run(\n    () => runApp(MyApp()),\n    logger: iSpectify,\n    onInit: () {\n      // Add ISpectify HTTP interceptor only in development/staging\n      client.interceptors.add(\n        ISpectHttpInterceptor(\n          logger: iSpectify,\n          settings: const ISpectHttpInterceptorSettings(\n            enableRedaction: true, // Always enable redaction for security\n          ),\n        ),\n      );\n    },\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ISpectify HTTP Example')),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              ElevatedButton(\n                onPressed: () async {\n                  // HTTP requests will be logged only when ISpect is enabled\n                  await client.get(\n                    Uri.parse('https://jsonplaceholder.typicode.com/posts/1'),\n                  );\n                },\n                child: const Text('Send HTTP Request'),\n              ),\n              const SizedBox(height: 16),\n              ElevatedButton(\n                onPressed: () async {\n                  // Error requests are also logged (when enabled)\n                  await client.get(\n                    Uri.parse('https://jsonplaceholder.typicode.com/invalid'),\n                  );\n                },\n                child: const Text('Send Error Request'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpectifyHttp integrates with the standard HTTP client through interceptors:\n\n| Component | Description |\n|-----------|-----------|\n| **HTTP Interceptor** | Captures HTTP requests and responses |\n| **Request Logger** | Logs request details (headers, body, params) |\n| **Response Logger** | Logs response data and timing |\n| **Error Handler** | Captures and logs HTTP errors |\n| **Performance Tracker** | Measures request/response times |",
   "custom_sections": "## Configuration Options\n\n### Basic Setup\n\n```dart\nfinal http_interceptor.InterceptedClient client =\n    http_interceptor.InterceptedClient.build(interceptors: []);\n\nISpect.run(\n  () => runApp(MyApp()),\n  logger: iSpectify,\n  onInit: () {\n    client.interceptors.add(\n      ISpectHttpInterceptor(logger: iSpectify),\n    );\n  },\n);\n```\n\n### Sensitive Data Redaction\n\nRedaction is enabled by default. Disable globally via settings or provide a custom redactor.\n\n```dart\n// Disable redaction\nclient.interceptors.add(\n  ISpectHttpInterceptor(\n    logger: iSpectify,\n    settings: const ISpectHttpInterceptorSettings(enableRedaction: false),\n  ),\n);\n\n// Provide a custom redactor\nfinal redactor = RedactionService();\nredactor.ignoreKeys(['x-debug']);\nredactor.ignoreValues(['sample-token']);\n\nclient.interceptors.add(\n  ISpectHttpInterceptor(\n    logger: iSpectify,\n    redactor: redactor,\n  ),\n);\n```\n\n### File Upload Example\n\n```dart\nfinal List<int> bytes = [1, 2, 3];\nconst String filename = 'file.txt';\n\nfinal http_interceptor.MultipartRequest request = http_interceptor.MultipartRequest(\n  'POST',\n  Uri.parse('https://api.example.com/upload'),\n);\n\nrequest.files.add(http_interceptor.MultipartFile.fromBytes(\n  'file',\n  bytes,\n  filename: filename,\n));\n\nclient.send(request);\n```",
   "advanced_configuration": "## Advanced Configuration\n\n### Production-Safe HTTP Client Setup\n\n```dart\n// Create a factory for conditional HTTP client setup\nclass HttpClientFactory {\n  static const bool _isEnabled = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n  \n  static http_interceptor.InterceptedClient createClient({\n    ISpectify? iSpectify,\n  }) {\n    final List<http_interceptor.InterceptorContract> interceptors = [];\n    \n    // Only add ISpect interceptor when enabled\n    if (_isEnabled && iSpectify != null) {\n      interceptors.add(\n        ISpectHttpInterceptor(\n          logger: iSpectify,\n          settings: const ISpectHttpInterceptorSettings(\n            enableRedaction: true,\n          ),\n        ),\n      );\n    }\n    \n    return http_interceptor.InterceptedClient.build(\n      interceptors: interceptors,\n    );\n  }\n}\n\n// Usage\nfinal client = HttpClientFactory.createClient(\n  iSpectify: ISpect.logger,\n);\n```\n\n### Environment-Specific Configuration\n\n```dart\nclass HttpConfig {\n  static ISpectHttpInterceptorSettings getSettings() {\n    const environment = String.fromEnvironment('ENVIRONMENT', defaultValue: 'development');\n    \n    switch (environment) {\n      case 'development':\n        return const ISpectHttpInterceptorSettings(\n          enableRedaction: false, // Allow full debugging in dev\n        );\n      case 'staging':\n        return const ISpectHttpInterceptorSettings(\n          enableRedaction: true,\n        );\n      default: // production\n        return const ISpectHttpInterceptorSettings(\n          enableRedaction: true,\n        );\n    }\n  }\n}\n```\n\n### Conditional Interceptor Setup\n\n```dart\nvoid setupHttpInterceptors(\n  http_interceptor.InterceptedClient client,\n  ISpectify? iSpectify,\n) {\n  const isISpectEnabled = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n  \n  if (isISpectEnabled && iSpectify != null) {\n    // Custom redactor for sensitive data\n    final redactor = RedactionService();\n    redactor.ignoreKeys(['authorization', 'x-api-key']);\n    redactor.ignoreValues(['<placeholder-secret>']);\n    \n    client.interceptors.add(\n      ISpectHttpInterceptor(\n        logger: iSpectify,\n        redactor: redactor,\n        settings: HttpConfig.getSettings(),\n      ),\n    );\n  }\n}\n\n// Close the underlying client if created outside the app lifecycle to free resources.\n```",
   "examples_section": "## Examples\n\nSee the [example/](example/) directory for complete integration examples with different HTTP client configurations.",
   "related_packages": "## Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispectify_dio](../ispectify_dio) - Dio HTTP client integration\n- [ispect](../ispect) - Main debugging interface\n- [http_interceptor](https://pub.dev/packages/http_interceptor) - HTTP interceptor package for Dart"
}