{
   "package_name": "ispectify_dio",
   "title": "ISpectify Dio",
   "description": "Dio HTTP client integration for ISpectify logging system",
   "tldr": "Capture Dio HTTP traffic with structured request/response/error logging.",
   "overview": "integrates the Dio HTTP client with the ISpectify logging system.",
   "features": [
      "HTTP Request Logging: Automatic logging of all Dio requests",
      "Response Tracking: Detailed response logging with timing information",
      "Error Handling: Comprehensive error logging with stack traces",
      "Request Inspection: Headers, body, and parameter logging",
      "Sensitive Data Redaction: Centralized redaction for headers and bodies (enabled by default, configurable)",
      "Performance Metrics: Request/response timing and size tracking",
      "Configurable: Flexible configuration options for different environments"
   ],
   "custom_overview_section": "ISpectifyDio integrates the Dio HTTP client with the ISpectify logging system for HTTP request monitoring.",
   "usage_example": "```dart\nimport 'package:dio/dio.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:ispect/ispect.dart';\nimport 'package:ispectify_dio/ispectify_dio.dart';\n\n// Use dart define to control ISpectify Dio integration\nconst bool kEnableISpectDio = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n\nfinal Dio dio = Dio(\n  BaseOptions(\n    baseUrl: 'https://jsonplaceholder.typicode.com',\n  ),\n);\n\nvoid main() {\n  if (kEnableISpectDio) {\n    _initializeWithISpect();\n  } else {\n    // Production initialization without ISpect\n    runApp(MyApp());\n  }\n}\n\nvoid _initializeWithISpect() {\n  final ISpectify iSpectify = ISpectifyFlutter.init();\n\n  ISpect.run(\n    () => runApp(MyApp()),\n          logger: iSpectify,\n    onInit: () {\n      // Add ISpectify Dio interceptor only in development/staging\n      dio.interceptors.add(\n        ISpectDioInterceptor(\n          logger: iSpectify,\n          settings: const ISpectDioInterceptorSettings(\n            printRequestHeaders: true,\n          ),\n        ),\n      );\n    },\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ISpectify Dio Example')),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              ElevatedButton(\n                onPressed: () {\n                  // HTTP requests will be logged only when ISpect is enabled\n                  dio.get<dynamic>('/posts/1');\n                },\n                child: const Text('Send GET Request'),\n              ),\n              const SizedBox(height: 16),\n              ElevatedButton(\n                onPressed: () {\n                  // Error requests are also logged (when enabled)\n                  dio.get<dynamic>('/invalid-endpoint');\n                },\n                child: const Text('Send Error Request'),\n              ),\n              const SizedBox(height: 16),\n              ElevatedButton(\n                onPressed: () {\n                  // Upload file with FormData\n                  final FormData formData = FormData();\n                  formData.files.add(MapEntry(\n                    'file',\n                    MultipartFile.fromBytes(\n                      [1, 2, 3],\n                      filename: 'file.txt',\n                    ),\n                  ));\n                  dio.post<dynamic>('/upload', data: formData);\n                },\n                child: const Text('Upload File'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpectifyDio integrates with the Dio HTTP client through interceptors:\n\n| Component | Description |\n|-----------|-----------|\n| **Dio Interceptor** | Captures HTTP requests and responses |\n| **Request Logger** | Logs request details (headers, body, params) |\n| **Response Logger** | Logs response data and timing |\n| **Error Handler** | Captures and logs HTTP errors |\n| **Performance Tracker** | Measures request/response times |",
   "custom_sections": "## Configuration Options\n\n### Basic Setup\n\n```dart\nfinal Dio dio = Dio(\n  BaseOptions(\n    baseUrl: 'https://api.example.com',\n  ),\n);\n\n// Initialize in ISpect.run onInit callback\nISpect.run(\n  () => runApp(MyApp()),\n  logger: iSpectify,\n  onInit: () {\n    dio.interceptors.add(\n      ISpectDioInterceptor(\n        logger: iSpectify,\n        settings: const ISpectDioInterceptorSettings(\n          printRequestHeaders: true,\n        ),\n      ),\n    );\n  },\n);\n```\n\n### Sensitive Data Redaction\n\nRedaction is enabled by default. Disable globally via settings or provide a custom redactor.\n\n```dart\n// Disable redaction\ndio.interceptors.add(\n  ISpectDioInterceptor(\n    logger: iSpectify,\n    settings: const ISpectDioInterceptorSettings(enableRedaction: false),\n  ),\n);\n\n// Provide a custom redactor\nfinal redactor = RedactionService();\nredactor.ignoreKeys(['x-debug']);\nredactor.ignoreValues(['sample-token']);\n\ndio.interceptors.add(\n  ISpectDioInterceptor(\n    logger: iSpectify,\n    redactor: redactor,\n  ),\n);\n```\n\n### Filtering with Optional Predicates\n\n```dart\ndio.interceptors.add(\n  ISpectDioInterceptor(\n    logger: iSpectify,\n    settings: const ISpectDioInterceptorSettings(\n      printRequestHeaders: true,\n      // requestFilter: (requestOptions) =>\n      //     requestOptions.path != '/sensitive-endpoint',\n      // responseFilter: (response) => response.statusCode != 404,\n      // errorFilter: (error) => error.response?.statusCode != 404,\n    ),\n  ),\n);\n```\n\n### Multiple Dio Instances\n\n```dart\nfinal Dio mainDio = Dio(BaseOptions(baseUrl: 'https://api.example.com'));\nfinal Dio uploadDio = Dio(BaseOptions(baseUrl: 'https://upload.example.com'));\n\nmainDio.interceptors.add(ISpectDioInterceptor(logger: iSpectify));\nuploadDio.interceptors.add(ISpectDioInterceptor(logger: iSpectify));\n```",
   "advanced_configuration": "## Advanced Configuration\n\n### Production-Safe HTTP Logging\n\n```dart\n// Create a factory for conditional Dio setup\nclass DioFactory {\n  static const bool _isEnabled = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n  \n  static Dio createDio({\n    String baseUrl = '',\n    ISpectify? iSpectify,\n  }) {\n    final dio = Dio(BaseOptions(baseUrl: baseUrl));\n    \n    // Only add interceptor when ISpect is enabled\n    if (_isEnabled && iSpectify != null) {\n      dio.interceptors.add(\n        ISpectDioInterceptor(\n          logger: iSpectify,\n          settings: ISpectDioInterceptorSettings(\n            printRequestHeaders: kDebugMode,\n            enableRedaction: true, // Keep redaction enabled outside development\n          ),\n        ),\n      );\n    }\n    \n    return dio;\n  }\n}\n\n// Usage\nfinal dio = DioFactory.createDio(\n  baseUrl: 'https://api.example.com',\n  iSpectify: ISpect.logger,\n);\n```\n\n### Environment-Specific Configuration\n\n```dart\nclass DioConfig {\n  static ISpectDioInterceptorSettings getSettings() {\n    const environment = String.fromEnvironment('ENVIRONMENT', defaultValue: 'development');\n    \n    switch (environment) {\n      case 'development':\n        return const ISpectDioInterceptorSettings(\n          printRequestHeaders: true,\n          printResponseHeaders: true,\n          enableRedaction: false, // Only disable if using non-sensitive test data\n        );\n      case 'staging':\n        return const ISpectDioInterceptorSettings(\n          printRequestHeaders: true,\n          printResponseHeaders: false,\n          enableRedaction: true,\n        );\n      default: // production\n        return const ISpectDioInterceptorSettings(\n          printRequestHeaders: false,\n          printResponseHeaders: false,\n          enableRedaction: true,\n        );\n    }\n  }\n}\n```\n\n### Conditional Interceptor Setup\n\n```dart\nvoid setupDioInterceptors(Dio dio, ISpectify? iSpectify) {\n  const isISpectEnabled = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n  \n  if (isISpectEnabled && iSpectify != null) {\n    // Custom redactor for sensitive data\n    final redactor = RedactionService();\n    redactor.ignoreKeys(['authorization', 'x-api-key']);\n    redactor.ignoreValues(['<placeholder-secret>', '<another-placeholder>']);\n    \n    dio.interceptors.add(\n      ISpectDioInterceptor(\n        logger: iSpectify,\n        redactor: redactor,\n        settings: DioConfig.getSettings(),\n      ),\n    );\n  }\n  \n  // Add other production interceptors here (avoid duplicate logging)\n}\n```",
   "examples_section": "## Examples\n\nSee the [example/](example/) directory for complete integration examples with different Dio configurations.",
   "related_packages": "## Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispectify_http](../ispectify_http) - Standard HTTP client integration\n- [ispect](../ispect) - Main debugging interface\n- [dio](https://pub.dev/packages/dio) - HTTP client for Dart"
}