{
   "package_name": "ispectify_dio",
   "title": "ISpectify Dio",
   "description": "Dio HTTP client integration for ISpectify logging system",
   "overview": "provides seamless integration between Dio HTTP client and the ISpectify logging system.",
   "features": [
      "üåê **HTTP Request Logging**: Automatic logging of all Dio requests",
      "üìä **Response Tracking**: Detailed response logging with timing information",
      "‚ùå **Error Handling**: Comprehensive error logging with stack traces",
      "üîç **Request Inspection**: Headers, body, and parameter logging",
      "‚ö° **Performance Metrics**: Request/response timing and size tracking",
      "üéõÔ∏è **Configurable**: Flexible configuration options for different environments"
   ],
   "custom_overview_section": "<div align=\"center\">\n\nüåê **HTTP Logging** ‚Ä¢ üìä **Response Tracking** ‚Ä¢ ‚ùå **Error Handling** ‚Ä¢ ‚ö° **Performance**\n\n</div>\n\nStreamline your HTTP debugging workflow by automatically capturing and logging all Dio HTTP client interactions. Perfect for monitoring API calls, debugging network issues, and tracking performance metrics.",
   "usage_example": "```dart\nimport 'package:dio/dio.dart';\nimport 'package:flutter/material.dart';\nimport 'package:ispect/ispect.dart';\nimport 'package:ispectify_dio/ispectify_dio.dart';\n\nfinal Dio dio = Dio(\n  BaseOptions(\n    baseUrl: 'https://jsonplaceholder.typicode.com',\n  ),\n);\n\nvoid main() {\n  final ISpectify iSpectify = ISpectifyFlutter.init();\n\n  ISpect.run(\n    () => runApp(MyApp()),\n    logger: iSpectify,\n    onInit: () {\n      // Add ISpectify Dio interceptor\n      dio.interceptors.add(\n        ISpectifyDioLogger(\n          iSpectify: iSpectify,\n          settings: const ISpectifyDioLoggerSettings(\n            printRequestHeaders: true,\n          ),\n        ),\n      );\n    },\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ISpectify Dio Example')),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              ElevatedButton(\n                onPressed: () {\n                  // All Dio requests will be automatically logged\n                  dio.get<dynamic>('/posts/1');\n                },\n                child: const Text('Send GET Request'),\n              ),\n              const SizedBox(height: 16),\n              ElevatedButton(\n                onPressed: () {\n                  // Error requests are also logged\n                  dio.get<dynamic>('/invalid-endpoint');\n                },\n                child: const Text('Send Error Request'),\n              ),\n              const SizedBox(height: 16),\n              ElevatedButton(\n                onPressed: () {\n                  // Upload file with FormData\n                  final FormData formData = FormData();\n                  formData.files.add(MapEntry(\n                    'file',\n                    MultipartFile.fromBytes(\n                      [1, 2, 3],\n                      filename: 'file.txt',\n                    ),\n                  ));\n                  dio.post<dynamic>('/upload', data: formData);\n                },\n                child: const Text('Upload File'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpectifyDio integrates with the Dio HTTP client through interceptors:\n\n| Component | Description |\n|-----------|-----------|\n| **Dio Interceptor** | Captures HTTP requests and responses |\n| **Request Logger** | Logs request details (headers, body, params) |\n| **Response Logger** | Logs response data and timing |\n| **Error Handler** | Captures and logs HTTP errors |\n| **Performance Tracker** | Measures request/response times |",
   "custom_sections": "## üîß Configuration Options\n\n### Basic Setup\n\n```dart\nfinal Dio dio = Dio(\n  BaseOptions(\n    baseUrl: 'https://api.example.com',\n  ),\n);\n\n// Initialize in ISpect.run onInit callback\nISpect.run(\n  () => runApp(MyApp()),\n  logger: iSpectify,\n  onInit: () {\n    dio.interceptors.add(\n      ISpectifyDioLogger(\n        iSpectify: iSpectify,\n        settings: const ISpectifyDioLoggerSettings(\n          printRequestHeaders: true,\n        ),\n      ),\n    );\n  },\n);\n```\n\n### Advanced Configuration with Filters\n\n```dart\ndio.interceptors.add(\n  ISpectifyDioLogger(\n    iSpectify: iSpectify,\n    settings: const ISpectifyDioLoggerSettings(\n      printRequestHeaders: true,\n      // Filter specific requests\n      // requestFilter: (requestOptions) =>\n      //     requestOptions.path != '/sensitive-endpoint',\n      // Filter specific responses\n      // responseFilter: (response) => response.statusCode != 404,\n      // Filter specific errors\n      // errorFilter: (error) => error.response?.statusCode != 404,\n    ),\n  ),\n);\n```\n\n### Multiple Dio Instances\n\n```dart\n// Main API client\nfinal Dio mainDio = Dio(\n  BaseOptions(baseUrl: 'https://api.example.com'),\n);\n\n// File upload client\nfinal Dio uploadDio = Dio(\n  BaseOptions(baseUrl: 'https://upload.example.com'),\n);\n\n// Add interceptors to both\nmainDio.interceptors.add(\n  ISpectifyDioLogger(iSpectify: iSpectify),\n);\n\nuploadDio.interceptors.add(\n  ISpectifyDioLogger(iSpectify: iSpectify),\n);\n```",
   "advanced_configuration": "",
   "examples_section": "## üìö Examples\n\nSee the [example/](example/) directory for complete integration examples with different Dio configurations.",
   "related_packages": "## üîó Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispectify_http](../ispectify_http) - Standard HTTP client integration\n- [ispect](../ispect) - Main debugging interface\n- [dio](https://pub.dev/packages/dio) - HTTP client for Dart"
}