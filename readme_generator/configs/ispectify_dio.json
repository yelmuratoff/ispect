{
   "package_name": "ispectify_dio",
   "title": "ISpectify Dio",
   "description": "Dio HTTP client integration for ISpectify logging system",
   "overview": "provides seamless integration between Dio HTTP client and the ISpectify logging system.",
   "features": [
      "🌐 **HTTP Request Logging**: Automatic logging of all Dio requests",
      "📊 **Response Tracking**: Detailed response logging with timing information",
      "❌ **Error Handling**: Comprehensive error logging with stack traces",
      "🔍 **Request Inspection**: Headers, body, and parameter logging",
      "⚡ **Performance Metrics**: Request/response timing and size tracking",
      "🎛️ **Configurable**: Flexible configuration options for different environments"
   ],
   "custom_overview_section": "<div align=\"center\">\n\n🌐 **HTTP Logging** • 📊 **Response Tracking** • ❌ **Error Handling** • ⚡ **Performance**\n\n</div>\n\nStreamline your HTTP debugging workflow by automatically capturing and logging all Dio HTTP client interactions. Perfect for monitoring API calls, debugging network issues, and tracking performance metrics.",
   "usage_example": "```dart\nimport 'package:dio/dio.dart';\nimport 'package:ispectify_dio/ispectify_dio.dart';\nimport 'package:ispectify/ispectify.dart';\n\nvoid main() {\n  final ispectify = ISpectify();\n  \n  // Create Dio instance with ISpectify interceptor\n  final dio = Dio()\n    ..interceptors.add(\n      ISpectifyDioInterceptor(\n        ispectify: ispectify,\n        settings: ISpectifyDioSettings(\n          printRequestHeaders: true,\n          printResponseHeaders: true,\n          printRequestBody: true,\n          printResponseBody: true,\n        ),\n      ),\n    );\n  \n  // All HTTP requests will be automatically logged\n  final response = await dio.get('https://api.example.com/data');\n}\n```",
   "architecture_note": "ISpectifyDio integrates with the Dio HTTP client through interceptors:\n\n| Component | Description |\n|-----------|-----------|\n| **Dio Interceptor** | Captures HTTP requests and responses |\n| **Request Logger** | Logs request details (headers, body, params) |\n| **Response Logger** | Logs response data and timing |\n| **Error Handler** | Captures and logs HTTP errors |\n| **Performance Tracker** | Measures request/response times |",
   "custom_sections": "## 🔧 Configuration Options\n\n### Basic Configuration\n\n```dart\nfinal interceptor = ISpectifyDioInterceptor(\n  ispectify: ispectify,\n  settings: ISpectifyDioSettings(\n    // Request logging\n    printRequestHeaders: true,\n    printRequestBody: true,\n    \n    // Response logging\n    printResponseHeaders: true,\n    printResponseBody: true,\n    \n    // Error handling\n    printErrorDetails: true,\n    \n    // Performance\n    trackRequestTime: true,\n  ),\n);\n```\n\n### Advanced Filtering\n\n```dart\nfinal interceptor = ISpectifyDioInterceptor(\n  ispectify: ispectify,\n  settings: ISpectifyDioSettings(\n    // Filter sensitive headers\n    headerFilter: (headers) => headers..remove('Authorization'),\n    \n    // Filter request bodies\n    requestBodyFilter: (body) {\n      if (body is Map) {\n        return Map.from(body)..remove('password');\n      }\n      return body;\n    },\n    \n    // Custom log levels\n    requestLogLevel: LogLevel.debug,\n    responseLogLevel: LogLevel.info,\n    errorLogLevel: LogLevel.error,\n  ),\n);\n```",
   "advanced_configuration": "## ⚙️ Advanced Features\n\n### Custom Log Formatting\n\n```dart\nfinal interceptor = ISpectifyDioInterceptor(\n  ispectify: ispectify,\n  settings: ISpectifyDioSettings(\n    requestFormatter: (request) => 'API Call: ${request.method} ${request.uri}',\n    responseFormatter: (response) => 'Response: ${response.statusCode} (${response.data?.length ?? 0} bytes)',\n  ),\n);\n```\n\n### Environment-based Configuration\n\n```dart\nfinal interceptor = ISpectifyDioInterceptor(\n  ispectify: ispectify,\n  settings: kDebugMode \n    ? ISpectifyDioSettings.debug() // Full logging in debug\n    : ISpectifyDioSettings.production(), // Minimal logging in production\n);\n```\n\n### Multiple Dio Instances\n\n```dart\n// API client\nfinal apiDio = Dio()\n  ..interceptors.add(\n    ISpectifyDioInterceptor(\n      ispectify: ispectify,\n      tag: 'API',\n    ),\n  );\n\n// Analytics client\nfinal analyticsDio = Dio()\n  ..interceptors.add(\n    ISpectifyDioInterceptor(\n      ispectify: ispectify,\n      tag: 'Analytics',\n    ),\n  );\n```",
   "examples_section": "## 📚 Examples\n\nSee the [example/](example/) directory for complete integration examples with different Dio configurations.",
   "related_packages": "## 🔗 Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispectify_http](../ispectify_http) - Standard HTTP client integration\n- [ispect](../ispect) - Main debugging interface\n- [dio](https://pub.dev/packages/dio) - HTTP client for Dart"
}