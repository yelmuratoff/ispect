{
   "package_name": "ispectify_bloc",
   "title": "ISpectify BLoC",
   "description": "BLoC state management integration for ISpectify logging system",
   "tldr": "Observe BLoC/Cubit events, transitions, states with selective filtering.",
   "overview": "integrates BLoC state management with the ISpectify logging system.",
   "features": [
      "State Change Logging: Automatic logging of all BLoC state changes",
      "Event Tracking: Detailed event logging with parameters",
      "Transition Monitoring: Complete state transition tracking",
      "Error Handling: BLoC error logging with stack traces",
      "Performance Metrics: State change timing and performance tracking",
      "Configurable: Flexible filtering and formatting options"
   ],
   "custom_overview_section": "ISpectifyBloc integrates BLoC state management with the ISpectify logging system for state change monitoring.",
   "usage_example": "```dart\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:ispect/ispect.dart';\nimport 'package:ispectify_bloc/ispectify_bloc.dart';\n\n// Use dart define to control ISpectify BLoC integration\nconst bool kEnableISpectBloc = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n\nvoid main() {\n  if (kEnableISpectBloc) {\n    _initializeWithISpect();\n  } else {\n    // Production initialization without ISpect\n    runApp(MyApp());\n  }\n}\n\nvoid _initializeWithISpect() {\n  final ISpectify iSpectify = ISpectifyFlutter.init();\n\n  ISpect.run(\n    () => runApp(MyApp()),\n    logger: iSpectify,\n    onInit: () {\n      // Set up BLoC observer only in development/staging\n      Bloc.observer = ISpectBlocObserver(\n        logger: iSpectify,\n      );\n    },\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: BlocProvider(\n        create: (context) => CounterCubit(),\n        child: const CounterPage(),\n      ),\n    );\n  }\n}\n\n// Your Cubit/BLoC will be automatically logged only when ISpect is enabled\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n\n  void increment() => emit(state + 1);\n  void decrement() => emit(state - 1);\n  \n  void load({required String data}) {\n    // State changes will be logged only when ISpect is enabled\n    emit(state + 1);\n  }\n}\n\nclass CounterPage extends StatelessWidget {\n  const CounterPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('ISpectify BLoC Example')),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            BlocBuilder<CounterCubit, int>(\n              builder: (context, state) {\n                return Text('Count: $state');\n              },\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () {\n                // This state change will be logged only when enabled\n                context.read<CounterCubit>().increment();\n              },\n              child: const Text('Increment'),\n            ),\n            const SizedBox(height: 8),\n            ElevatedButton(\n              onPressed: () {\n                // This state change will also be logged only when enabled\n                context.read<CounterCubit>().load(data: 'Test data');\n              },\n              child: const Text('Load Data'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpectifyBloc integrates with the BLoC library through observers:\n\n| Component | Description |\n|-----------|-----------|\n| **BLoC Observer** | Captures all BLoC events and state changes |\n| **Event Logger** | Logs events with parameters and metadata |\n| **State Logger** | Logs state changes and transitions |\n| **Error Handler** | Captures and logs BLoC errors |\n| **Performance Tracker** | Measures state change performance |",
   "custom_sections": "## Configuration Options\n\n### Basic Setup\n\n```dart\n// Initialize in ISpect.run onInit callback\nISpect.run(\n  () => runApp(MyApp()),\n  logger: iSpectify,\n  onInit: () {\n    // Set up BLoC observer for automatic logging\n    Bloc.observer = ISpectBlocObserver(\n      logger: iSpectify,\n    );\n  },\n);\n```\n\n### Filtering BLoC Logs\n\n```dart\n// You can disable specific BLoC logs in ISpectTheme\nISpectBuilder(\n  theme: const ISpectTheme(\n    logDescriptions: [\n      LogDescription(\n        key: 'bloc-event',\n        isDisabled: true, // Disable event logs\n      ),\n      LogDescription(\n        key: 'bloc-transition',\n        isDisabled: true, // Disable transition logs\n      ),\n      LogDescription(\n        key: 'bloc-close',\n        isDisabled: true, // Disable close logs\n      ),\n      LogDescription(\n        key: 'bloc-create',\n        isDisabled: true, // Disable create logs\n      ),\n      LogDescription(\n        key: 'bloc-state',\n        isDisabled: true, // Disable state logs\n      ),\n    ],\n  ),\n  child: child,\n)\n```\n\n### Using with Different BLoC Types\n\n```dart\n// Works with Cubit\nclass CounterCubit extends Cubit<int> {\n  CounterCubit() : super(0);\n  void increment() => emit(state + 1);\n}\n\n// Works with BLoC\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncremented>((event, emit) {\n      emit(state + 1);\n    });\n  }\n}\n\n// All state changes will be automatically logged\n```",
   "advanced_configuration": "",
   "examples_section": "## Examples\n\nSee the [example/](example/) directory for complete integration examples with different BLoC patterns.",
   "related_packages": "## Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispect](../ispect) - Main debugging interface\n- [flutter_bloc](https://pub.dev/packages/flutter_bloc) - BLoC state management library\n- [bloc](https://pub.dev/packages/bloc) - Core BLoC library"
}