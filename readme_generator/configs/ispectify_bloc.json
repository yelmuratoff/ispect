{
   "package_name": "ispectify_bloc",
   "title": "ISpectify BLoC",
   "description": "BLoC state management integration for ISpectify logging system",
   "overview": "provides seamless integration between BLoC state management and the ISpectify logging system.",
   "version": "4.1.3",
   "features": [
      "🔄 **State Change Logging**: Automatic logging of all BLoC state changes",
      "📝 **Event Tracking**: Detailed event logging with parameters",
      "🔍 **Transition Monitoring**: Complete state transition tracking",
      "❌ **Error Handling**: BLoC error logging with stack traces",
      "⚡ **Performance Metrics**: State change timing and performance tracking",
      "🎛️ **Configurable**: Flexible filtering and formatting options"
   ],
   "custom_overview_section": "<div align=\"center\">\n\n🔄 **State Tracking** • 📝 **Event Logging** • 🔍 **Transition Monitoring** • ❌ **Error Handling**\n\n</div>\n\nEnhance your BLoC debugging workflow by automatically capturing and logging all state management interactions. Perfect for tracking state changes, debugging complex flows, and monitoring application behavior.",
   "usage_example": "```dart\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:ispectify_bloc/ispectify_bloc.dart';\nimport 'package:ispectify/ispectify.dart';\n\nvoid main() {\n  final ispectify = ISpectify();\n  \n  // Set up BLoC observer\n  Bloc.observer = ISpectifyBlocObserver(\n    ispectify: ispectify,\n    settings: ISpectifyBlocSettings(\n      printEvents: true,\n      printStates: true,\n      printTransitions: true,\n      printChanges: true,\n    ),\n  );\n  \n  runApp(MyApp());\n}\n\n// Your BLoC will be automatically logged\nclass CounterBloc extends Bloc<CounterEvent, int> {\n  CounterBloc() : super(0) {\n    on<CounterIncremented>((event, emit) {\n      emit(state + 1);\n    });\n  }\n}\n```",
   "architecture_note": "ISpectifyBloc integrates with the BLoC library through observers:\n\n| Component | Description |\n|-----------|-----------|\n| **BLoC Observer** | Captures all BLoC events and state changes |\n| **Event Logger** | Logs events with parameters and metadata |\n| **State Logger** | Logs state changes and transitions |\n| **Error Handler** | Captures and logs BLoC errors |\n| **Performance Tracker** | Measures state change performance |",
   "custom_sections": "## 🔧 Configuration Options\n\n### Basic Configuration\n\n```dart\nBloc.observer = ISpectifyBlocObserver(\n  ispectify: ispectify,\n  settings: ISpectifyBlocSettings(\n    // Event logging\n    printEvents: true,\n    \n    // State logging\n    printStates: true,\n    \n    // Transition logging\n    printTransitions: true,\n    \n    // Change logging\n    printChanges: true,\n    \n    // Error handling\n    printErrors: true,\n  ),\n);\n```\n\n### Advanced Filtering\n\n```dart\nBloc.observer = ISpectifyBlocObserver(\n  ispectify: ispectify,\n  settings: ISpectifyBlocSettings(\n    // Filter specific BLoCs\n    blocFilter: (bloc) => bloc.runtimeType != NavigationBloc,\n    \n    // Filter sensitive events\n    eventFilter: (event) {\n      if (event is AuthEvent) {\n        return event.copyWith(password: '***');\n      }\n      return event;\n    },\n    \n    // Filter states\n    stateFilter: (state) {\n      if (state is UserState) {\n        return state.copyWith(sensitiveData: null);\n      }\n      return state;\n    },\n    \n    // Custom log levels\n    eventLogLevel: LogLevel.debug,\n    stateLogLevel: LogLevel.info,\n    errorLogLevel: LogLevel.error,\n  ),\n);\n```",
   "advanced_configuration": "## ⚙️ Advanced Features\n\n### Custom Log Formatting\n\n```dart\nBloc.observer = ISpectifyBlocObserver(\n  ispectify: ispectify,\n  settings: ISpectifyBlocSettings(\n    eventFormatter: (bloc, event) => '${bloc.runtimeType}: ${event.runtimeType}',\n    stateFormatter: (bloc, state) => '${bloc.runtimeType} -> ${state.runtimeType}',\n    transitionFormatter: (bloc, transition) => \n      '${bloc.runtimeType}: ${transition.event.runtimeType} -> ${transition.nextState.runtimeType}',\n  ),\n);\n```\n\n### Performance Monitoring\n\n```dart\nBloc.observer = ISpectifyBlocObserver(\n  ispectify: ispectify,\n  settings: ISpectifyBlocSettings(\n    trackPerformance: true,\n    performanceThreshold: Duration(milliseconds: 100), // Log slow transitions\n  ),\n);\n```\n\n### Multiple Observers\n\n```dart\n// Combine with other observers\nclass MultiBlocObserver extends BlocObserver {\n  final List<BlocObserver> _observers;\n  \n  MultiBlocObserver(this._observers);\n  \n  @override\n  void onChange(BlocBase bloc, Change change) {\n    for (final observer in _observers) {\n      observer.onChange(bloc, change);\n    }\n  }\n  \n  // Implement other methods...\n}\n\nBloc.observer = MultiBlocObserver([\n  ISpectifyBlocObserver(ispectify: ispectify),\n  CustomBlocObserver(),\n]);\n```",
   "examples_section": "## 📚 Examples\n\nSee the [example/](example/) directory for complete integration examples with different BLoC patterns.",
   "related_packages": "## 🔗 Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispect](../ispect) - Main debugging interface\n- [flutter_bloc](https://pub.dev/packages/flutter_bloc) - BLoC state management library\n- [bloc](https://pub.dev/packages/bloc) - Core BLoC library"
}