{
   "package_name": "ispect",
   "title": "ISpect",
   "description": "Logging and inspector tool for Flutter development and testing",
   "overview": "is the main debugging and inspection toolkit designed specifically for Flutter applications.",
   "features": [
      "üåê **Network Monitoring**: Detailed HTTP request/response inspection with error tracking",
      "üìù **Logging**: Advanced logging system with categorization and filtering",
      "‚ö° **Performance Analysis**: Real-time performance metrics and monitoring",
      "üîç **UI Inspector**: Widget hierarchy inspection with color picker and layout analysis",
      "üì± **Device Information**: System and app metadata collection",
      "üêõ **Bug Reporting**: Integrated feedback system with screenshot capture",
      "üóÑÔ∏è **Cache Management**: Application cache inspection and management"
   ],
   "custom_overview_section": "<div align=\"center\">\n\nüìä **Real-time Monitoring** ‚Ä¢ üêõ **Debugging** ‚Ä¢ üîç **Inspection** ‚Ä¢ ‚ö° **Performance Tracking**\n\n</div>\n\nISpect empowers Flutter developers with a suite of debugging tools that seamlessly integrate into your development workflow. From monitoring HTTP requests in real-time to tracking performance metrics and managing application state, ISpect provides an intuitive interface that makes debugging efficient and insightful.",
   "usage_example": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:ispect/ispect.dart';\n\nvoid main() {\n  // Initialize ISpectify for logging\n  final ISpectify logger = ISpectifyFlutter.init();\n\n  // Wrap your app with ISpect\n  ISpect.run(\n    () => runApp(MyApp()),\n    logger: logger,\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      localizationsDelegates: ISpectLocalizations.localizationDelegates([\n        // Add your localization delegates here\n      ]),\n      builder: (context, child) => ISpectBuilder(\n        child: child ?? const SizedBox.shrink(),\n      ),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ISpect Example')),\n        body: Center(\n          child: ElevatedButton(\n            onPressed: () {\n              ISpect.logger.info('Button pressed!');\n            },\n            child: const Text('Press me'),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpect is built as a modular system with specialized packages:\n\n| Package | Purpose | Version |\n|---------|---------|---------|\n| [ispect](https://github.com/yelmuratoff/ispect/tree/main/packages/ispect) | Core debugging interface and tools | [![pub](https://img.shields.io/pub/v/ispect.svg)](https://pub.dev/packages/ispect) |\n| [ispectify](https://github.com/yelmuratoff/ispect/tree/main/packages/ispectify) | Foundation logging system (based on Talker) | [![pub](https://img.shields.io/pub/v/ispectify.svg)](https://pub.dev/packages/ispectify) |\n| [ispectify_dio](https://github.com/yelmuratoff/ispect/tree/main/packages/ispectify_dio) | Dio HTTP client integration | [![pub](https://img.shields.io/pub/v/ispectify_dio.svg)](https://pub.dev/packages/ispectify_dio) |\n| [ispectify_http](https://github.com/yelmuratoff/ispect/tree/main/packages/ispectify_http) | Standard HTTP client integration | [![pub](https://img.shields.io/pub/v/ispectify_http.svg)](https://pub.dev/packages/ispectify_http) |\n| [ispectify_ws](https://github.com/yelmuratoff/ispect/tree/main/packages/ispectify_ws) | WebSocket connection monitoring | [![pub](https://img.shields.io/pub/v/ispectify_ws.svg)](https://pub.dev/packages/ispectify_ws) |\n| [ispectify_bloc](https://github.com/yelmuratoff/ispect/tree/main/packages/ispectify_bloc) | BLoC state management integration | [![pub](https://img.shields.io/pub/v/ispectify_bloc.svg)](https://pub.dev/packages/ispectify_bloc) |\n| [ispect_jira](https://github.com/yelmuratoff/ispect/tree/main/packages/ispect_jira) | Jira ticket creation integration | [![pub](https://img.shields.io/pub/v/ispect_jira.svg)](https://pub.dev/packages/ispect_jira) |",
   "custom_sections": "## üèóÔ∏è Architecture\n\nISpect is built as a modular system with specialized packages:\n\n| Package | Purpose | Version |\n|---------|---------|---------|\n| [ispect](packages/ispect) | Core debugging interface and tools | [![pub](https://img.shields.io/pub/v/ispect.svg)](https://pub.dev/packages/ispect) |\n| [ispectify](packages/ispectify) | Foundation logging system (based on Talker) | [![pub](https://img.shields.io/pub/v/ispectify.svg)](https://pub.dev/packages/ispectify) |\n| [ispectify_dio](packages/ispectify_dio) | Dio HTTP client integration | [![pub](https://img.shields.io/pub/v/ispectify_dio.svg)](https://pub.dev/packages/ispectify_dio) |\n| [ispectify_http](packages/ispectify_http) | Standard HTTP client integration | [![pub](https://img.shields.io/pub/v/ispectify_http.svg)](https://pub.dev/packages/ispectify_http) |\n| [ispectify_ws](packages/ispectify_ws) | WebSocket connection monitoring | [![pub](https://img.shields.io/pub/v/ispectify_ws.svg)](https://pub.dev/packages/ispectify_ws) |\n| [ispectify_bloc](packages/ispectify_bloc) | BLoC state management integration | [![pub](https://img.shields.io/pub/v/ispectify_bloc.svg)](https://pub.dev/packages/ispectify_bloc) |\n| [ispect_jira](packages/ispect_jira) | Jira ticket creation integration | [![pub](https://img.shields.io/pub/v/ispect_jira.svg)](https://pub.dev/packages/ispect_jira) |\n\n## üåê Internationalization\n- Support for 12 languages: English, Russian, Kazakh, Chinese, Spanish, French, German, Portuguese, Arabic, Korean, Japanese, Hindi\n- Extensible localization system\n\n## üì± Interface Preview\n\n<div align=\"center\">\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/panel.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/logs.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/detailed_http_request.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/detailed_http_response.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/inspector.png?raw=true\" width=\"160\" />\n</div>\n\n<div align=\"center\">\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/color_picker.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/feedback.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/cache.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/device_info.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/info.png?raw=true\" width=\"160\" />\n</div>",
   "advanced_configuration": "## ‚öôÔ∏è Advanced Configuration\n\n### üé® Custom Theming\n\n```dart\nMaterialApp(\n  builder: (context, child) => ISpectBuilder(\n    theme: ISpectTheme(\n      pageTitle: 'Your name here',\n      lightBackgroundColor: Colors.white,\n      darkBackgroundColor: Colors.black,\n      lightDividerColor: Colors.grey.shade300,\n      darkDividerColor: Colors.grey.shade800,\n      logColors: {\n        'error': Colors.red,\n        'info': Colors.blue,\n      },\n      logIcons: {\n        'error': Icons.error,\n        'info': Icons.info,\n      },\n      logDescriptions: [\n        LogDescription(\n          key: 'riverpod-add',\n          isDisabled: true,\n        ),\n        LogDescription(\n          key: 'riverpod-update',\n          isDisabled: true,\n        ),\n        LogDescription(\n          key: 'riverpod-dispose',\n          isDisabled: true,\n        ),\n        LogDescription(\n          key: 'riverpod-fail',\n          isDisabled: true,\n        ),\n      ],\n    ),\n    child: child ?? const SizedBox.shrink(),\n  ),\n  /* ... */\n)\n```\n\n### üéõÔ∏è Panel Customization\n\n```dart\nMaterialApp(\n  builder: (context, child) => ISpectBuilder(\n    options: ISpectOptions(\n      locale: const Locale('your_locale'),\n      isFeedbackEnabled: true,\n      actionItems: [\n        ISpectActionItem(\n            onTap: (BuildContext context) {},\n            title: 'Some title here',\n            icon: Icons.add),\n      ],\n      panelItems: [\n        ISpectPanelItem(\n          enableBadge: false,\n          icon: Icons.settings,\n          onTap: (context) {\n            // Handle settings tap\n          },\n        ),\n      ],\n      panelButtons: [\n        ISpectPanelButtonItem(\n            icon: Icons.info,\n            label: 'Info',\n            onTap: (context) {\n              // Handle info tap\n            }),\n      ],\n    ),\n    child: child ?? const SizedBox.shrink(),\n  ),\n  /* ... */\n)\n```",
   "examples_section": "## üìö Examples\n\nComplete example applications are available in the [example/](example/) directory demonstrating core functionality.",
   "related_packages": "## üîó Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispectify_dio](../ispectify_dio) - Dio HTTP client integration\n- [ispectify_http](../ispectify_http) - Standard HTTP client integration\n- [ispectify_ws](../ispectify_ws) - WebSocket connection monitoring\n- [ispectify_bloc](../ispectify_bloc) - BLoC state management integration\n- [ispect_jira](../ispect_jira) - Jira ticket creation integration"
}