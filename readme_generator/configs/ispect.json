{
   "package_name": "ispect",
   "title": "ISpect",
   "description": "Logging and inspector tool for Flutter development and testing",
   "overview": "is the main debugging and inspection toolkit designed specifically for Flutter applications.",
   "features": [
      "Network Monitoring: Detailed HTTP request/response inspection with error tracking",
      "Logging: Advanced logging system with categorization and filtering",
      "Performance Analysis: Real-time performance metrics and monitoring",
      "UI Inspector: Widget hierarchy inspection with color picker and layout analysis",
      "Device Information: System and app metadata collection",
      "Bug Reporting: Integrated feedback system with screenshot capture",
      "Cache Management: Application cache inspection and management"
   ],
   "custom_overview_section": "ISpect provides comprehensive debugging capabilities for Flutter applications, including network monitoring, performance tracking, and UI inspection tools.",
   "usage_example": "```dart\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:ispect/ispect.dart';\n\n// Use dart define to control ISpect inclusion\nconst bool kEnableISpect = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n\nvoid main() {\n  if (kEnableISpect) {\n    // Initialize ISpect only in development/staging\n    _initializeISpect();\n  } else {\n    // Production initialization without ISpect\n    runApp(MyApp());\n  }\n}\n\nvoid _initializeISpect() {\n  // Initialize ISpectify for logging\n  final ISpectify logger = ISpectifyFlutter.init();\n\n  // Wrap your app with ISpect\n  ISpect.run(\n    () => runApp(MyApp()),\n    logger: logger,\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      localizationsDelegates: kEnableISpect\n          ? ISpectLocalizations.localizationDelegates([\n              // Add your localization delegates here\n            ])\n          : [\n              // Your regular localization delegates\n            ],\n      // Conditionally add ISpectBuilder in MaterialApp builder\n      builder: (context, child) {\n        if (kEnableISpect) {\n          return ISpectBuilder(child: child ?? const SizedBox.shrink());\n        }\n        return child ?? const SizedBox.shrink();\n      },\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ISpect Example')),\n        body: Center(\n          child: ElevatedButton(\n            onPressed: () {\n              if (kEnableISpect) {\n                ISpect.logger.info('Button pressed!');\n              }\n            },\n            child: const Text('Press me'),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpect is built as a modular system with specialized packages:\n\n| Package | Purpose | Version |\n|---------|---------|---------|\n| [ispect](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispect) | Core debugging interface and tools | [![pub](https://img.shields.io/pub/v/ispect.svg)](https://pub.dev/packages/ispect) |\n| [ispectify](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispectify) | Foundation logging system (based on Talker) | [![pub](https://img.shields.io/pub/v/ispectify.svg)](https://pub.dev/packages/ispectify) |\n| [ispectify_dio](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispectify_dio) | Dio HTTP client integration | [![pub](https://img.shields.io/pub/v/ispectify_dio.svg)](https://pub.dev/packages/ispectify_dio) |\n| [ispectify_http](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispectify_http) | Standard HTTP client integration | [![pub](https://img.shields.io/pub/v/ispectify_http.svg)](https://pub.dev/packages/ispectify_http) |\n| [ispectify_ws](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispectify_ws) | WebSocket connection monitoring | [![pub](https://img.shields.io/pub/v/ispectify_ws.svg)](https://pub.dev/packages/ispectify_ws) |\n| [ispectify_bloc](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispectify_bloc) | BLoC state management integration | [![pub](https://img.shields.io/pub/v/ispectify_bloc.svg)](https://pub.dev/packages/ispectify_bloc) |\n| [ispect_jira](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispect_jira) | Jira ticket creation integration | [![pub](https://img.shields.io/pub/v/ispect_jira.svg)](https://pub.dev/packages/ispect_jira) |",
   "custom_sections": "## üåê Internationalization\n- Support for 12 languages: English, Russian, Kazakh, Chinese, Spanish, French, German, Portuguese, Arabic, Korean, Japanese, Hindi\n- Extensible localization system\n\n## üì± Interface Preview\n\n<div align=\"center\">\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/panel.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/logs.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/detailed_http_request.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/detailed_http_response.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/inspector.png?raw=true\" width=\"160\" />\n</div>\n\n<div align=\"center\">\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/color_picker.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/feedback.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/cache.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/device_info.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/info.png?raw=true\" width=\"160\" />\n</div>",
   "advanced_configuration": "## ‚öôÔ∏è Advanced Configuration\n\n### üõ°Ô∏è Environment-Based Setup\n\n```dart\n// Create a dedicated ISpect configuration file\n// lib/config/ispect_config.dart\n\nimport 'package:flutter/foundation.dart';\n\nclass ISpectConfig {\n  static const bool isEnabled = bool.fromEnvironment(\n    'ENABLE_ISPECT',\n    defaultValue: kDebugMode, // Only enable in debug by default\n  );\n  \n  static const String environment = String.fromEnvironment(\n    'ENVIRONMENT',\n    defaultValue: 'development',\n  );\n  \n  // Only enable in development and staging\n  static bool get shouldInitialize => \n    isEnabled && (environment != 'production');\n}\n```\n\n### üé® Custom Theming (Development Only)\n\n```dart\n// Wrap theming configuration in conditional check\nWidget build(BuildContext context) {\n  return MaterialApp(\n    builder: (context, child) {\n      if (ISpectConfig.shouldInitialize) {\n        return ISpectBuilder(\n          theme: ISpectTheme(\n            pageTitle: 'Debug Panel',\n            lightBackgroundColor: Colors.white,\n            darkBackgroundColor: Colors.black,\n            lightDividerColor: Colors.grey.shade300,\n            darkDividerColor: Colors.grey.shade800,\n            logColors: {\n              'error': Colors.red,\n              'info': Colors.blue,\n            },\n            logIcons: {\n              'error': Icons.error,\n              'info': Icons.info,\n            },\n            logDescriptions: [\n              LogDescription(\n                key: 'riverpod-add',\n                isDisabled: true,\n              ),\n              LogDescription(\n                key: 'riverpod-update',\n                isDisabled: true,\n              ),\n              LogDescription(\n                key: 'riverpod-dispose',\n                isDisabled: true,\n              ),\n              LogDescription(\n                key: 'riverpod-fail',\n                isDisabled: true,\n              ),\n            ],\n          ),\n          child: child ?? const SizedBox.shrink(),\n        );\n      }\n      return child ?? const SizedBox.shrink();\n    },\n    home: Scaffold(/* your app content */),\n  );\n}\n```\n\n### üéõÔ∏è Panel Customization (Development Only)\n\n```dart\nWidget build(BuildContext context) {\n  return MaterialApp(\n    builder: (context, child) {\n      if (!ISpectConfig.shouldInitialize) {\n        return child ?? const SizedBox.shrink(); // Return app without ISpect in production\n      }\n      \n      return ISpectBuilder(\n        options: ISpectOptions(\n          locale: const Locale('en'),\n          isFeedbackEnabled: true,\n          actionItems: [\n            ISpectActionItem(\n                onTap: (BuildContext context) {\n                  // Development-only actions\n                },\n                title: 'Dev Action',\n                icon: Icons.build),\n          ],\n          panelItems: [\n            ISpectPanelItem(\n              enableBadge: false,\n              icon: Icons.settings,\n              onTap: (context) {\n                // Handle settings tap\n              },\n            ),\n          ],\n          panelButtons: [\n            ISpectPanelButtonItem(\n                icon: Icons.info,\n                label: 'Debug Info',\n                onTap: (context) {\n                  // Handle debug info tap\n                }),\n          ],\n        ),\n        child: child ?? const SizedBox.shrink(),\n      );\n    },\n    home: Scaffold(/* your app content */),\n  );\n}\n```\n\n### üì± Build Configuration Examples\n\n```bash\n# Development with ISpect\nflutter run --dart-define=ENABLE_ISPECT=true --dart-define=ENVIRONMENT=development\n\n# Staging with ISpect\nflutter build apk --dart-define=ENABLE_ISPECT=true --dart-define=ENVIRONMENT=staging\n\n# Production without ISpect (recommended)\nflutter build apk --dart-define=ENABLE_ISPECT=false --dart-define=ENVIRONMENT=production\n\n# Or use flavor-specific configurations\nflutter build apk --flavor production # ISpect automatically disabled\n```",
   "integration_guides": "## üîó Integration Guides\n\nISpect provides seamless integration with various Flutter packages through specialized companion packages. Below are detailed guides for integrating ISpect with HTTP clients, state management, WebSocket connections, and navigation.\n\n### üì¶ Required Dependencies\n\nAdd the following packages to your `pubspec.yaml` based on your needs:\n\n```yaml\ndependencies:\n  # Core ISpect\n  ispect: ^4.3.3\n  \n  # HTTP integrations (choose one or both)\n  ispectify_dio: ^4.3.3      # For Dio HTTP client\n  ispectify_http: ^4.3.3     # For standard HTTP package\n  \n  # WebSocket integration\n  ispectify_ws: ^4.3.3       # For WebSocket monitoring\n  \n  # State management integration\n  ispectify_bloc: ^4.3.3     # For BLoC state management\n  \n  # Optional: Jira integration\n  ispect_jira: ^4.3.3        # For automated bug reporting\n```\n\n### üåê HTTP Integration\n\n#### Dio HTTP Client\n\nFor Dio integration, use the `ispectify_dio` package:\n\n```yaml\ndependencies:\n  ispectify_dio: ^4.3.3\n```\n\n```dart\nimport 'package:dio/dio.dart';\nimport 'package:ispectify_dio/ispectify_dio.dart';\n\nfinal Dio dio = Dio(\n  BaseOptions(\n    baseUrl: 'https://api.example.com',\n  ),\n);\n\n// Initialize in ISpect.run onInit callback\nISpect.run(\n  () => runApp(MyApp()),\n  logger: iSpectify,\n  onInit: () {\n    dio.interceptors.add(\n      ISpectDioInterceptor(\n        logger: iSpectify,\n        settings: const ISpectDioInterceptorSettings(\n          printRequestHeaders: true,\n          printResponseHeaders: true,\n          printRequestData: true,\n          printResponseData: true,\n        ),\n      ),\n    );\n  },\n);\n```\n\n#### Standard HTTP Client\n\nFor standard HTTP package integration, use the `ispectify_http` package:\n\n```yaml\ndependencies:\n  ispectify_http: ^4.3.3\n```\n\n```dart\nimport 'package:http_interceptor/http_interceptor.dart' as http_interceptor;\nimport 'package:ispectify_http/ispectify_http.dart';\n\nfinal http_interceptor.InterceptedClient client =\n    http_interceptor.InterceptedClient.build(interceptors: []);\n\nISpect.run(\n  () => runApp(MyApp()),\n  logger: iSpectify,\n  onInit: () {\n    client.interceptors.add(\n      ISpectHttpInterceptor(\n        logger: iSpectify,\n        settings: const ISpectHttpInterceptorSettings(\n          printRequestHeaders: true,\n          printResponseHeaders: true,\n        ),\n      ),\n    );\n  },\n);\n```\n\n#### Multiple HTTP Clients\n\nYou can monitor multiple Dio or HTTP clients simultaneously:\n\n```dart\nfinal Dio mainDio = Dio(BaseOptions(baseUrl: 'https://api.example.com'));\nfinal Dio uploadDio = Dio(BaseOptions(baseUrl: 'https://upload.example.com'));\n\nISpect.run(\n  () => runApp(MyApp()),\n  logger: iSpectify,\n  onInit: () {\n    // Add interceptors to both clients\n    mainDio.interceptors.add(ISpectDioInterceptor(logger: iSpectify));\n    uploadDio.interceptors.add(ISpectDioInterceptor(logger: iSpectify));\n  },\n);\n```\n\n### üîó WebSocket Integration\n\nFor WebSocket monitoring, use the `ispectify_ws` package:\n\n```yaml\ndependencies:\n  ispectify_ws: ^4.3.3\n```\n\n```dart\nimport 'package:ws/ws.dart';\nimport 'package:ispectify_ws/ispectify_ws.dart';\n\nfinal interceptor = ISpectWSInterceptor(\n  logger: iSpectify,\n  settings: const ISpectWSInterceptorSettings(\n    enabled: true,\n    printSentData: true,\n    printReceivedData: true,\n    printReceivedMessage: true,\n    printErrorData: true,\n    printErrorMessage: true,\n  ),\n);\n\nfinal client = WebSocketClient(\n  WebSocketOptions.common(\n    interceptors: [interceptor],\n  ),\n);\n\ninterceptor.setClient(client);\n```\n\n### üîÑ BLoC State Management Integration\n\nFor BLoC integration, use the `ispectify_bloc` package:\n\n```yaml\ndependencies:\n  ispectify_bloc: ^4.3.3\n```\n\n```dart\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:ispectify_bloc/ispectify_bloc.dart';\n\n// Initialize in ISpect.run onInit callback\nISpect.run(\n  () => runApp(MyApp()),\n  logger: iSpectify,\n  onInit: () {\n    Bloc.observer = ISpecBlocObserver(\n      logger: iSpectify,\n    );\n  },\n);\n```\n\nYou can also filter specific BLoC logs in the ISpect theme:\n\n```dart\nISpectBuilder(\n  theme: const ISpectTheme(\n    logDescriptions: [\n      LogDescription(\n        key: 'bloc-event',\n        isDisabled: true, // Disable event logs\n      ),\n      LogDescription(\n        key: 'bloc-transition',\n        isDisabled: true, // Disable transition logs\n      ),\n      LogDescription(\n        key: 'bloc-state',\n        isDisabled: true, // Disable state logs\n      ),\n    ],\n  ),\n  child: child,\n)\n```\n\n### üß≠ Navigation Integration\n\nTo track screen navigation, use `ISpectNavigatorObserver`:\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:ispect/ispect.dart';\n\nclass MyApp extends StatefulWidget {\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  final _observer = ISpectNavigatorObserver(\n    isLogModals: true,      // Log modal dialogs\n    isLogPages: true,       // Log page navigations\n    isLogGestures: false,    // Log user gestures (can be verbose)\n    isLogOtherTypes: true,   // Log other navigation types\n  );\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      navigatorObservers: [_observer],\n      // ... other MaterialApp properties\n      builder: (context, child) {\n        return ISpectBuilder(\n          observer: _observer, // Connect observer to ISpect\n          child: child ?? const SizedBox(),\n        );\n      },\n    );\n  }\n}\n```\n\nNavigation events will be logged with the key `route` and include information about:\n- Page transitions (push/pop)\n- Modal presentations\n- User gestures (if enabled)\n- Route names and arguments\n\n### üîí Sensitive Data Redaction\n\nAll integration packages support automatic redaction of sensitive data. Redaction is enabled by default but can be configured:\n\n#### Dio Example\n\n```dart\n// Disable redaction globally\nfinal interceptor = ISpectDioInterceptor(\n  logger: iSpectify,\n  settings: const ISpectDioInterceptorSettings(\n    enableRedaction: false,\n  ),\n);\n\n// Custom redaction service\nfinal redactor = RedactionService();\nredactor.ignoreKeys(['x-debug']);\nredactor.ignoreValues(['sample-token']);\n\nfinal interceptor = ISpectDioInterceptor(\n  logger: iSpectify,\n  redactor: redactor,\n);\n```\n\n#### HTTP Example\n\n```dart\nfinal redactor = RedactionService();\nredactor.ignoreKeys(['authorization', 'x-api-key']);\nredactor.ignoreValues(['Bearer token123', 'secret-key']);\n\nclient.interceptors.add(\n  ISpectHttpInterceptor(\n    logger: iSpectify,\n    redactor: redactor,\n  ),\n);\n```\n\n#### WebSocket Example\n\n```dart\nfinal redactor = RedactionService();\nredactor.ignoreKeys(['auth_token']);\nredactor.ignoreValues(['ws-secret']);\n\nfinal interceptor = ISpectWSInterceptor(\n  logger: iSpectify,\n  redactor: redactor,\n);\n```\n\nRedaction automatically masks sensitive data in:\n- HTTP headers (Authorization, API keys, etc.)\n- Request/response bodies\n- WebSocket messages\n- Query parameters\n\n### üéõÔ∏è Log Filtering and Customization\n\nYou can disable specific types of logs to reduce noise and focus on relevant information:\n\n```dart\nISpectBuilder(\n  theme: const ISpectTheme(\n    logDescriptions: [\n      // BLoC logs\n      LogDescription(key: 'bloc-event', isDisabled: true),\n      LogDescription(key: 'bloc-transition', isDisabled: true),\n      LogDescription(key: 'bloc-state', isDisabled: true),\n      LogDescription(key: 'bloc-create', isDisabled: false),\n      LogDescription(key: 'bloc-close', isDisabled: false),\n      \n      // HTTP logs\n      LogDescription(key: 'http-request', isDisabled: false),\n      LogDescription(key: 'http-response', isDisabled: false),\n      LogDescription(key: 'http-error', isDisabled: false),\n      \n      // Navigation logs\n      LogDescription(key: 'route', isDisabled: false),\n      \n      // Other logs\n      LogDescription(key: 'print', isDisabled: true), // Flutter print statements\n      LogDescription(key: 'analytics', isDisabled: true),\n    ],\n  ),\n  child: child,\n)\n```\n\nAvailable log keys include:\n- `bloc-*`: BLoC state management events\n- `http-*`: HTTP request/response/error logs\n- `route`: Navigation events\n- `print`: Flutter print statements\n- `analytics`: Analytics events\n- `error`, `debug`, `info`: General log levels",
   "examples_section": "## üìö Examples\n\nComplete example applications are available in the [example/](example/) directory demonstrating core functionality.",
   "related_packages": "## üîó Related Packages\n\n- [ispectify](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispectify) - Foundation logging system\n- [ispectify_dio](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispectify_dio) - Dio HTTP client integration\n- [ispectify_http](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispectify_http) - Standard HTTP client integration\n- [ispectify_ws](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispectify_ws) - WebSocket connection monitoring\n- [ispectify_bloc](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispectify_bloc) - BLoC state management integration\n- [ispect_jira](https://github.com/K1yoshiSho/ispect/tree/main/packages/ispect_jira) - Jira ticket creation integration"
}