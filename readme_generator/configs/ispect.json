{
   "package_name": "ispect",
   "title": "ISpect",
   "description": "Core debugging interface and inspection toolkit for Flutter development",
   "overview": "is the main debugging and inspection toolkit designed specifically for Flutter applications.",
   "version": "4.1.3",
   "features": [
      "🌐 **Network Monitoring**: Detailed HTTP request/response inspection with error tracking",
      "📝 **Comprehensive Logging**: Advanced logging system with categorization and filtering",
      "⚡ **Performance Analysis**: Real-time performance metrics and monitoring",
      "🔍 **UI Inspector**: Widget hierarchy inspection with color picker and layout analysis",
      "📱 **Device Information**: System and app metadata collection",
      "🐛 **Bug Reporting**: Integrated feedback system with screenshot capture",
      "🗄️ **Cache Management**: Application cache inspection and management"
   ],
   "custom_overview_section": "<div align=\"center\">\n\n📊 **Real-time Monitoring** • 🐛 **Debugging** • 🔍 **Inspection** • ⚡ **Performance Tracking**\n\n</div>\n\nISpect empowers Flutter developers with a suite of debugging tools that seamlessly integrate into your development workflow. From monitoring HTTP requests in real-time to tracking performance metrics and managing application state, ISpect provides an intuitive interface that makes debugging efficient and insightful.",
   "usage_example": "```dart\nimport 'package:ispect/ispect.dart';\nimport 'package:ispectify/ispectify.dart';\n\nvoid main() {\n  // Initialize ISpectify for logging\n  final ispectify = ISpectify();\n  \n  // Wrap your app with ISpect\n  ISpect.run(\n    () => runApp(MyApp()),\n    ispectify: ispectify,\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ISpectScopeWrapper(\n      child: MaterialApp(\n        // Add ISpect to your app\n        builder: (context, child) => ISpectBuilder(\n          child: child ?? const SizedBox.shrink(),\n        ),\n        \n        // Add navigation observer\n        navigatorObservers: [\n          ISpectNavigatorObserver(),\n        ],\n        \n        home: HomePage(),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpect is built as a modular system with specialized packages:\n\n| Package | Purpose | Version |\n|---------|---------|---------|\n| [ispect](../ispect) | Core debugging interface and tools | [![pub](https://img.shields.io/pub/v/ispect.svg)](https://pub.dev/packages/ispect) |\n| [ispectify](../ispectify) | Foundation logging system (based on Talker) | [![pub](https://img.shields.io/pub/v/ispectify.svg)](https://pub.dev/packages/ispectify) |\n| [ispectify_dio](../ispectify_dio) | Dio HTTP client integration | [![pub](https://img.shields.io/pub/v/ispectify_dio.svg)](https://pub.dev/packages/ispectify_dio) |\n| [ispectify_http](../ispectify_http) | Standard HTTP client integration | [![pub](https://img.shields.io/pub/v/ispectify_http.svg)](https://pub.dev/packages/ispectify_http) |\n| [ispectify_bloc](../ispectify_bloc) | BLoC state management integration | [![pub](https://img.shields.io/pub/v/ispectify_bloc.svg)](https://pub.dev/packages/ispectify_bloc) |\n| [ispect_jira](../ispect_jira) | Jira ticket creation integration | [![pub](https://img.shields.io/pub/v/ispect_jira.svg)](https://pub.dev/packages/ispect_jira) |",
   "custom_sections": "## ✨ Features\n\n### 🔍 Network Inspection\n- Real-time HTTP request/response monitoring\n- Detailed request headers, body, and parameters\n- Response data with status codes and timing\n- Error logging with stack traces\n- Support for both Dio and standard HTTP clients\n\n### 📊 Advanced Logging\n- Structured log categorization (info, debug, warning, error)\n- Custom log types with color coding\n- Real-time log filtering and search\n- Export functionality for logs\n- BLoC event and state change tracking\n\n### 🎯 UI Development Tools\n- Widget inspector with hierarchy visualization\n- Color picker for design consistency\n- Layout analysis and debugging\n- Performance overlay with FPS monitoring\n- Screenshot capture with annotation tools\n\n### 📱 Device & Environment Info\n- Device specifications and capabilities\n- Application metadata and build information\n- Cache usage monitoring and management\n- System resource utilization\n\n### 🐛 Bug Reporting\n- Integrated feedback system\n- Screenshot capture with drawing tools\n- Automatic device and app context collection\n- Jira integration for ticket creation\n\n### 🌐 Internationalization\n- Support for 12 languages: English, Russian, Kazakh, Chinese, Spanish, French, German, Portuguese, Arabic, Korean, Japanese, Hindi\n- Extensible localization system\n\n## 📱 Interface Preview\n\n<div align=\"center\">\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/panel.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/logs.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/detailed_http_request.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/detailed_http_response.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/inspector.png?raw=true\" width=\"160\" />\n</div>\n\n<div align=\"center\">\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/color_picker.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/feedback.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/cache.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/device_info.png?raw=true\" width=\"160\" />\n  <img src=\"https://github.com/yelmuratoff/packages_assets/blob/main/assets/ispect/info.png?raw=true\" width=\"160\" />\n</div>",
   "advanced_configuration": "## ⚙️ Advanced Configuration\n\n### 🎨 Custom Theming\n\n```dart\nISpectScopeWrapper(\n  theme: ISpectTheme(\n    logColors: {\n      'custom-log': Colors.purple,\n    },\n    logIcons: {\n      'http-request': Icons.send,\n      'http-response': Icons.receipt,\n    },\n  ),\n  child: MaterialApp(/* ... */),\n)\n```\n\n### 🎛️ Panel Customization\n\n```dart\nISpectScopeWrapper(\n  options: ISpectOptions(\n    panelButtons: [\n      ('Custom Action', Icons.star, () {\n        // Custom action\n      }),\n    ],\n  ),\n  child: MaterialApp(/* ... */),\n)\n```\n\n### 🗺️ Router Integration (GoRouter)\n\nFor GoRouter, add a listener to track route changes:\n\n```dart\n_router.routerDelegate.addListener(() {\n  final location = _router.routerDelegate\n    .currentConfiguration.last.matchedLocation;\n  ISpect.route(location);\n});\n```",
   "examples_section": "## 📚 Examples\n\nComplete example applications are available in the [example/](example/) directory demonstrating core functionality.",
   "related_packages": "## 🔗 Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispectify_dio](../ispectify_dio) - Dio HTTP client integration\n- [ispectify_http](../ispectify_http) - Standard HTTP client integration\n- [ispectify_bloc](../ispectify_bloc) - BLoC state management integration\n- [ispect_jira](../ispect_jira) - Jira ticket creation integration"
}