{
   "package_name": "ispect_jira",
   "title": "ISpect Jira",
   "description": "Jira ticket creation integration for ISpect debugging toolkit",
   "overview": "provides seamless integration between ISpect debugging toolkit and Jira for automated bug reporting and ticket creation.",
   "version": "4.1.3",
   "features": [
      "üé´ **Automated Ticket Creation**: Create Jira tickets directly from the debugging interface",
      "üì∏ **Screenshot Attachment**: Automatically attach screenshots to tickets",
      "üìù **Context Collection**: Gather device info, logs, and app state for tickets",
      "üîß **Configurable Fields**: Customize ticket fields and metadata",
      "üöÄ **Easy Integration**: Simple setup with existing Jira instances",
      "üéõÔ∏è **Flexible Auth**: Support for various Jira authentication methods"
   ],
   "custom_overview_section": "<div align=\"center\">\n\nüé´ **Ticket Creation** ‚Ä¢ üì∏ **Screenshots** ‚Ä¢ üìù **Context** ‚Ä¢ üîß **Configuration**\n\n</div>\n\nStreamline your bug reporting workflow by automatically creating detailed Jira tickets with screenshots, device information, and debugging context directly from your Flutter app during development and testing.",
   "usage_example": "```dart\nimport 'package:ispect_jira/ispect_jira.dart';\nimport 'package:ispect/ispect.dart';\n\nvoid main() {\n  // Configure Jira integration\n  final jiraService = ISpectJiraService(\n    config: JiraConfig(\n      baseUrl: 'https://your-domain.atlassian.net',\n      username: 'your-email@domain.com',\n      apiToken: 'your-api-token',\n      projectKey: 'PROJECT',\n    ),\n  );\n  \n  ISpect.run(\n    () => runApp(MyApp()),\n    ispectify: ISpectify(),\n    jiraService: jiraService,\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ISpectScopeWrapper(\n      // Jira integration is automatically available in feedback system\n      child: MaterialApp(\n        builder: (context, child) => ISpectBuilder(\n          child: child ?? const SizedBox.shrink(),\n        ),\n        home: HomePage(),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpectJira integrates with Jira through REST API:\n\n| Component | Description |\n|-----------|-----------|\n| **Jira Client** | REST API client for Jira communication |\n| **Ticket Builder** | Creates tickets with debugging context |\n| **Attachment Handler** | Manages screenshot and log attachments |\n| **Auth Manager** | Handles various authentication methods |\n| **Context Collector** | Gathers device and app information |",
   "custom_sections": "## üîß Configuration Options\n\n### Basic Configuration\n\n```dart\nfinal jiraService = ISpectJiraService(\n  config: JiraConfig(\n    baseUrl: 'https://your-domain.atlassian.net',\n    username: 'your-email@domain.com',\n    apiToken: 'your-api-token',\n    projectKey: 'MOBILE',\n    \n    // Default ticket settings\n    issueType: 'Bug',\n    priority: 'Medium',\n    labels: ['mobile-app', 'flutter'],\n  ),\n);\n```\n\n### Advanced Configuration\n\n```dart\nfinal jiraService = ISpectJiraService(\n  config: JiraConfig(\n    baseUrl: 'https://your-domain.atlassian.net',\n    username: 'your-email@domain.com',\n    apiToken: 'your-api-token',\n    projectKey: 'MOBILE',\n    \n    // Custom fields\n    customFields: {\n      'customfield_10001': 'Mobile App',\n      'customfield_10002': 'Flutter',\n    },\n    \n    // Ticket template\n    titleTemplate: '[MOBILE] {summary}',\n    descriptionTemplate: '''\n*Device Info:*\n{device_info}\n\n*App Version:*\n{app_version}\n\n*Description:*\n{description}\n\n*Steps to Reproduce:*\n{steps}\n\n*Logs:*\n{logs}\n''',\n  ),\n);\n```\n\n### Authentication Methods\n\n```dart\n// API Token (recommended)\nfinal config = JiraConfig(\n  baseUrl: 'https://your-domain.atlassian.net',\n  username: 'your-email@domain.com',\n  apiToken: 'your-api-token',\n  projectKey: 'PROJECT',\n);\n\n// Basic Auth\nfinal config = JiraConfig(\n  baseUrl: 'https://your-domain.atlassian.net',\n  username: 'your-username',\n  password: 'your-password',\n  projectKey: 'PROJECT',\n);\n\n// OAuth (for self-hosted Jira)\nfinal config = JiraConfig(\n  baseUrl: 'https://your-jira-instance.com',\n  oauthConfig: OAuthConfig(\n    consumerKey: 'your-consumer-key',\n    privateKey: 'your-private-key',\n    accessToken: 'your-access-token',\n  ),\n  projectKey: 'PROJECT',\n);\n```",
   "advanced_configuration": "## ‚öôÔ∏è Advanced Features\n\n### Custom Ticket Builder\n\n```dart\nfinal jiraService = ISpectJiraService(\n  config: config,\n  ticketBuilder: CustomTicketBuilder(),\n);\n\nclass CustomTicketBuilder implements JiraTicketBuilder {\n  @override\n  Future<JiraTicket> buildTicket(\n    String summary,\n    String description,\n    FeedbackData feedbackData,\n  ) async {\n    return JiraTicket(\n      summary: '[MOBILE] $summary',\n      description: await _buildDescription(description, feedbackData),\n      priority: _determinePriority(feedbackData),\n      labels: _generateLabels(feedbackData),\n      attachments: await _collectAttachments(feedbackData),\n    );\n  }\n}\n```\n\n### Conditional Ticket Creation\n\n```dart\nfinal jiraService = ISpectJiraService(\n  config: config,\n  shouldCreateTicket: (feedbackData) {\n    // Only create tickets for errors or specific conditions\n    return feedbackData.hasErrors || feedbackData.severity == 'high';\n  },\n);\n```\n\n### Multiple Jira Instances\n\n```dart\n// Production Jira\nfinal prodJira = ISpectJiraService(\n  config: JiraConfig(\n    baseUrl: 'https://prod.atlassian.net',\n    projectKey: 'PROD',\n    // ...\n  ),\n);\n\n// Development Jira\nfinal devJira = ISpectJiraService(\n  config: JiraConfig(\n    baseUrl: 'https://dev.atlassian.net',\n    projectKey: 'DEV',\n    // ...\n  ),\n);\n\n// Use different services based on environment\nfinal jiraService = kDebugMode ? devJira : prodJira;\n```",
   "examples_section": "## üìö Examples\n\nSee the [example/](example/) directory for complete integration examples including:\n- Basic Jira setup\n- Custom ticket templates\n- Multiple environment configuration\n- Advanced authentication scenarios",
   "related_packages": "## üîó Related Packages\n\n- [ispect](../ispect) - Main debugging interface\n- [ispectify](../ispectify) - Foundation logging system\n- [http](https://pub.dev/packages/http) - HTTP client for API communication\n- [feedback](https://pub.dev/packages/feedback) - User feedback system"
}