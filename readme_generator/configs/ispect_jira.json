{
   "package_name": "ispect_jira",
   "title": "ISpect Jira",
   "description": "Jira ticket creation integration for ISpect debugging toolkit",
   "overview": "provides seamless integration between ISpect debugging toolkit and Jira for automated bug reporting and ticket creation.",
   "features": [
      "Automated Ticket Creation: Create Jira tickets directly from the debugging interface",
      "Screenshot Attachment: Automatically attach screenshots to tickets",
      "Context Collection: Gather device info, logs, and app state for tickets",
      "Configurable Fields: Customize ticket fields and metadata",
      "Easy Integration: Simple setup with existing Jira instances",
      "Flexible Auth: Support for various Jira authentication methods"
   ],
   "custom_overview_section": "ISpectJira provides seamless integration between ISpect debugging toolkit and Jira for automated bug reporting and ticket creation.",
   "usage_example": "```dart\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:ispect/ispect.dart';\nimport 'package:ispect_jira/ispect_jira.dart';\n\n// Use dart define to control ISpect Jira integration\nconst bool kEnableISpectJira = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n\nvoid main() {\n  if (kEnableISpectJira) {\n    _initializeWithISpect();\n  } else {\n    // Production initialization without ISpect\n    runApp(MyApp());\n  }\n}\n\nvoid _initializeWithISpect() {\n  final iSpectify = ISpectifyFlutter.init();\n\n  ISpect.run(\n    () => runApp(MyApp()),\n    logger: iSpectify,\n    isPrintLoggingEnabled: true,\n  );\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    \n    // Initialize Jira client only when ISpect is enabled\n    if (kEnableISpectJira) {\n      ISpectJiraClient.initialize(\n        projectDomain: 'your-domain',\n        userEmail: 'your-email@domain.com',\n        apiToken: 'your-api-token',\n        projectId: '10007',\n        projectKey: 'PROJECT',\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // Wrap with ISpect only when enabled\n    if (kEnableISpectJira) {\n      return MaterialApp(\n        builder: (context, child) => ISpectBuilder(\n          options: ISpectOptions(\n            actionItems: [\n              ISpectActionItem(\n                title: 'Report Bug',\n                icon: Icons.bug_report_outlined,\n                onTap: (context) {\n                  if (ISpectJiraClient.isInitialized) {\n                    // Navigate to create issue screen\n                    Navigator.push(\n                      context,\n                      MaterialPageRoute<void>(\n                        builder: (_) => const JiraSendIssueScreen(),\n                      ),\n                    );\n                  } else {\n                    // Navigate to auth screen\n                    Navigator.push(\n                      context,\n                      MaterialPageRoute<void>(\n                        builder: (_) => JiraAuthScreen(\n                          onAuthorized: (domain, email, apiToken, projectId, projectKey) {\n                            ISpect.logger.good('‚úÖ Jira authorized');\n                          },\n                        ),\n                      ),\n                    );\n                  }\n                },\n              ),\n            ],\n          ),\n          feedbackBuilder: (context, onSubmit, controller) => JiraFeedbackBuilder(\n            onSubmit: onSubmit,\n            theme: Theme.of(context),\n            scrollController: controller,\n          ),\n          child: child ?? const SizedBox.shrink(),\n        ),\n        home: const HomePage(),\n      );\n    }\n    \n    // Production app without ISpect\n    return MaterialApp(\n      home: const HomePage(),\n    );\n  }\n}\n\n// Placeholder home page\nclass HomePage extends StatelessWidget {\n  const HomePage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('ISpect Jira Example')),\n      body: const Center(\n        child: Text('Jira integration enabled only in development'),\n      ),\n    );\n  }\n}\n```",
   "architecture_note": "ISpectJira integrates with Atlassian Jira Cloud through REST API:\n\n| Component | Description |\n|-----------|-----------|\n| **ISpectJiraClient** | Singleton client managing Jira API communication |\n| **JiraFeedbackBuilder** | Custom feedback widget with Jira integration |\n| **JiraAuthScreen** | Authentication and project selection interface |\n| **JiraSendIssueScreen** | Complete issue creation with attachments |\n| **Screenshot Capture** | Automatic screenshot attachment system |",
   "custom_sections": "## üîß Configuration Options\n\n### Basic Setup\n\n```dart\nvoid main() {\n  final iSpectify = ISpectifyFlutter.init();\n\n  ISpect.run(\n    () => runApp(MyApp()),\n    logger: iSpectify,\n  );\n}\n\nclass MyApp extends StatefulWidget {\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    // Initialize with your Jira credentials\n    ISpectJiraClient.initialize(\n      projectDomain: 'your-company',  // your-company.atlassian.net\n      userEmail: 'developer@company.com',\n      apiToken: 'ATATT3xFfGF0...', // Generate from Jira API tokens\n      projectId: '10007',\n      projectKey: 'MOBILE',\n    );\n  }\n}\n```\n\n### Authentication Methods\n\n```dart\n// Method 1: Direct initialization in code\nISpectJiraClient.initialize(\n  projectDomain: 'your-domain',\n  userEmail: 'your-email@domain.com',\n  apiToken: 'your-api-token',\n  projectId: '10007',\n  projectKey: 'PROJECT',\n);\n\n// Method 2: Runtime authentication with UI\nNavigator.push(\n  context,\n  MaterialPageRoute<void>(\n    builder: (_) => JiraAuthScreen(\n      onAuthorized: (domain, email, apiToken, projectId, projectKey) {\n        // Credentials saved automatically to ISpectJiraClient\n        ISpect.logger.good('Jira authenticated successfully');\n      },\n    ),\n  ),\n);\n```\n\n### Custom Feedback Integration\n\n```dart\nISpectBuilder(\n  feedbackBuilder: (context, onSubmit, controller) => JiraFeedbackBuilder(\n    onSubmit: onSubmit,\n    theme: Theme.of(context),\n    scrollController: controller,\n  ),\n  child: child,\n)\n```\n\n### Jira Action Items\n\n```dart\nISpectOptions(\n  actionItems: [\n    ISpectActionItem(\n      title: 'Report Bug',\n      icon: Icons.bug_report_outlined,\n      onTap: (context) {\n        if (ISpectJiraClient.isInitialized) {\n          Navigator.push(\n            context,\n            MaterialPageRoute<void>(\n              builder: (_) => const JiraSendIssueScreen(),\n            ),\n          );\n        } else {\n          // Show authentication screen\n          Navigator.push(\n            context,\n            MaterialPageRoute<void>(\n              builder: (_) => JiraAuthScreen(\n                onAuthorized: (domain, email, apiToken, projectId, projectKey) {\n                  // Handle successful authentication\n                },\n              ),\n            ),\n          );\n        }\n      },\n    ),\n  ],\n),\n```",
   "advanced_configuration": "## ‚öôÔ∏è Advanced Features\n\n### Custom Issue Creation\n\n```dart\n// Create issues programmatically\nfinal issue = await ISpectJiraClient.createIssue(\n  assigneeId: 'user-id',\n  description: 'Bug description with context',\n  issueTypeId: '10001', // Bug type ID\n  label: 'mobile-app',\n  summary: 'App crashes on startup',\n  priorityId: '3', // Medium priority\n);\n\n// Add attachments to existing issue\nfinal attachments = [File('screenshot.png')];\nawait ISpectJiraClient.addAttachmentsToIssue(\n  issue: issue,\n  attachments: attachments,\n);\n```\n\n### Client State Management\n\n```dart\n// Check client initialization state\nif (ISpectJiraClient.isInitialized) {\n  print('Jira client is fully configured');\n  print('Project: ${ISpectJiraClient.projectKey}');\n  print('Domain: ${ISpectJiraClient.projectDomain}');\n}\n\nif (ISpectJiraClient.isClientInitialized) {\n  print('Jira API client is ready');\n}\n\n// Restart client with new credentials\nISpectJiraClient.restart();\n```\n\n### Fetching Jira Data\n\n```dart\n// Get available projects\nfinal projects = await ISpectJiraClient.getProjects();\n\n// Get current user\nfinal user = await ISpectJiraClient.getCurrentUser();\n\n// Get issue types and statuses\nfinal statuses = await ISpectJiraClient.getStatuses();\n\n// Get available labels\nfinal labels = await ISpectJiraClient.getLabels();\n\n// Get project users\nfinal users = await ISpectJiraClient.getUsers();\n\n// Get boards and sprints\nfinal boards = await ISpectJiraClient.getBoards();\nfinal sprints = await ISpectJiraClient.getSprints(boardId: 123);\n```\n\n### Custom Send Issue Screen\n\n```dart\n// Navigate with pre-filled data\nNavigator.push(\n  context,\n  MaterialPageRoute<void>(\n    builder: (_) => JiraSendIssueScreen(\n      initialDescription: 'Pre-filled bug description',\n      initialAttachmentPath: '/path/to/screenshot.png',\n    ),\n  ),\n);\n```\n\n### Localization Support\n\n```dart\nMaterialApp(\n  localizationsDelegates: ISpectLocalizations.localizationDelegates([\n    AppLocalizations.delegate,\n    ISpectJiraLocalization.delegate, // Add Jira localizations\n  ]),\n  // ... rest of app configuration\n)\n```",
   "examples_section": "## üìö Examples\n\nSee the [example/](example/) directory for complete integration examples including:\n- Basic Jira setup\n- Custom ticket templates\n- Multiple environment configuration\n- Advanced authentication scenarios",
   "related_packages": "## üîó Related Packages\n\n- [ispect](../ispect) - Main debugging interface\n- [ispectify](../ispectify) - Foundation logging system\n- [atlassian_apis](https://pub.dev/packages/atlassian_apis) - Jira REST API client\n- [feedback](https://pub.dev/packages/feedback) - User feedback system"
}