{
   "package_name": "ispectify_db",
   "title": "ispectify_db",
   "description": "Passive database logging utilities for the ISpect toolkit. Keep your DB calls as-is and simply log intents, timings, and results. Works with SQL and key-value stores (sqflite, drift, hive, shared_preferences, etc.) without importing them in this package.",
   "tldr": "No adapters required (yet) — call one or two methods. Minimal API, maximum flexibility. Redaction, sampling, truncation, SQL digest, slow query mark, transaction markers.",
   "overview": "is the passive database logging utilities for the ISpect toolkit",
   "features": [
      "No adapters required (yet) — call one or two methods",
      "Minimal API, maximum flexibility",
      "Redaction, sampling, truncation, SQL digest",
      "Slow query mark, transaction markers",
      "Works with SQL and key-value stores (sqflite, drift, hive, shared_preferences, etc.)",
      "Automatic duration and success/error capture",
      "Structured event logging with ISpect UI integration"
   ],
   "custom_overview_section": "ispectify_db provides passive logging for database operations without requiring changes to your existing database code. Simply wrap your DB calls with logging methods to capture intents, timings, results, and errors. It integrates seamlessly with the ISpect debugging toolkit and supports various database drivers and key-value stores.",
   "usage_example": "```dart\nimport 'package:ispect/ispect.dart';\nimport 'package:ispectify_db/ispectify_db.dart';\n\n// Configure (optional)\nISpectDbCore.config = const ISpectDbConfig(\n  sampleRate: 1.0,\n  redact: true,\n  attachStackOnError: true,\n  enableTransactionMarkers: false,\n  slowQueryThreshold: Duration(milliseconds: 400),\n);\n\n// Log a simple event\nISpect.logger.db(\n  source: 'SharedPreferences',\n  operation: 'write',\n  target: 'language',\n  value: 'eu',\n);\n\n// Wrap an async DB call to capture duration + success/error\nfinal rows = await ISpect.logger.dbTrace<List<Map<String, Object?>>>(\n  source: 'sqflite',\n  operation: 'query',\n  statement: 'SELECT * FROM users WHERE id = ?',\n  args: [userId],\n  table: 'users',\n  run: () => db.rawQuery('SELECT * FROM users WHERE id = ?', [userId]),\n  projectResult: (rows) => {'rows': rows.length},\n);\n\n// Manual start/end\nfinal t = ISpect.logger.dbStart(\n  source: 'hive',\n  operation: 'get',\n  key: 'session',\n);\ntry {\n  final value = await box.get('session');\n  ISpect.logger.dbEnd(t, value: value, success: true);\n} catch (e) {\n  ISpect.logger.dbEnd(t, error: e, success: false);\n  rethrow;\n}\n\n// Transaction markers\nawait ISpect.logger.dbTransaction(\n  source: 'sqflite',\n  logMarkers: true,\n  run: () async {\n    await ISpect.logger.dbTrace(\n      source: 'sqflite',\n      operation: 'update',\n      statement: 'UPDATE users SET name=? WHERE id=?',\n      args: ['Bob', 1],\n      run: () => db.rawUpdate('UPDATE users SET name=? WHERE id=?', ['Bob', 1]),\n    );\n  },\n);\n```",
   "architecture_note": "ispectify_db integrates with the ISpect logging ecosystem:\n\n| Component | Description |\n|-----------|-----------|\n| **DB Logger** | Core logging interface for database operations |\n| **Configuration** | Global settings for redaction, sampling, and thresholds |\n| **Transaction Support** | Correlated logging for multi-operation transactions |\n| **Performance Tracking** | Automatic duration measurement and slow query detection |\n| **ISpect Integration** | Structured events compatible with ISpect UI |",
   "custom_sections": "## API Reference\n\n### Core Methods\n\n- `ISpectDbCore.config = ISpectDbConfig(...)` — set global behavior\n- `ISpectLogger.db(...)` — emit a single DB event\n- `ISpectLogger.dbTrace<T>(...)` — wrap a Future and emit on completion\n- `ISpectLogger.dbStart(...)` / `ISpectLogger.dbEnd(...)` — manual span around code\n- `ISpectLogger.dbTransaction(...)` — run with shared transactionId\n\n### Common Fields\n\n- `source`: driver name (sqflite, drift, hive, shared_prefs, etc.)\n- `operation`: query, insert, update, delete, get, put, remove, etc.\n- `statement`: SQL string (truncated and digested)\n- `target` / `table` / `key`: operation target\n- `args` / `namedArgs`: query parameters\n- `value` or `projectResult`: logged result\n- `meta`: additional context\n\n### Redaction & Truncation\n\nRedaction replaces values for keys in `redactKeys` (case-insensitive). Truncation applies to long strings and preserves structure.\n\n### Sampling\n\nPer-call or global sampling to control log volume.\n\n### Slow Queries\n\nMark operations exceeding `slowQueryThreshold`.\n\n## Structured Events\n\nEvents use ISpect-recognized keys:\n- `db-query`: read operations\n- `db-result`: successful writes\n- `db-error`: failed operations\n\nAdditional data includes source, operation, duration, success, etc.\n\n## Best Practices\n\n- Prefer `dbTrace` for automatic capture\n- Use `projectResult` for large results\n- Set `slowQueryThreshold` for performance monitoring\n- Use `dbTransaction` for correlated operations\n- Enable `attachStackOnError` for diagnostics",
   "examples_section": "## Examples\n\nSee the [example/](example/) directory for complete usage examples and integration patterns.",
   "related_packages": "## Related Packages\n\n- [ispect](../ispect) - Main debugging interface\n- [ispectify](../ispectify) - Core logging system\n- [ispectify_dio](../ispectify_dio) - HTTP client integration\n- [ispectify_http](../ispectify_http) - HTTP client integration\n- [ispectify_ws](../ispectify_ws) - WebSocket integration"
}