{
   "package_name": "ispectify_ws",
   "title": "ISpectify WebSocket",
   "description": "WebSocket interceptor integration for ISpectify logging system using ws package",
   "tldr": "Track WebSocket connects, messages, errors, metrics with optional redaction.",
   "overview": "integrates the ws package with the ISpectify logging system for WebSocket monitoring.",
   "features": [
      "WebSocket Connection Logging: Automatic logging of all WebSocket connections",
      "Message Tracking: Detailed logging of sent and received messages",
      "Error Handling: Comprehensive error logging with stack traces",
      "Connection Inspection: URL, connection state, and metrics logging",
      "Sensitive Data Redaction: Centralized redaction for sent/received payloads (enabled by default, configurable)",
      "Performance Metrics: Connection timing and message count tracking",
      "Lightweight: Minimal overhead using ws package interceptors"
   ],
   "custom_overview_section": "ISpectifyWS integrates the ws package with the ISpectify logging system for WebSocket monitoring.",
   "usage_example": "```dart\nimport 'dart:async';\nimport 'dart:io' as io show exit;\nimport 'package:flutter/foundation.dart';\nimport 'package:ispectify/ispectify.dart';\nimport 'package:ispectify_ws/ispectify_ws.dart';\nimport 'package:ws/ws.dart';\n\n// Use dart define to control ISpectify WebSocket integration\nconst bool kEnableISpectWS = bool.fromEnvironment('ENABLE_ISPECT', defaultValue: false);\n\nvoid main() {\n  // Replace with your test endpoint or local dev server; avoid deprecated public echo services\n  const url = 'wss://example.com/socket';\n  if (kEnableISpectWS) {\n    _initializeWithISpect(url);\n  } else {\n    _initializeWithoutISpect(url);\n  }\n}\n\nvoid _initializeWithISpect(String url) {\n  final logger = ISpectify();\n  final interceptor = ISpectWSInterceptor(\n    logger: logger,\n    settings: const ISpectWSInterceptorSettings(\n      enabled: true,\n      printSentData: true,\n      printReceivedData: true,\n      printErrorData: true,\n      enableRedaction: true, // Keep redaction enabled for any non-local traffic\n    ),\n  );\n  final client = WebSocketClient(\n    WebSocketOptions.common(\n      connectionRetryInterval: (\n        min: const Duration(milliseconds: 500),\n        max: const Duration(seconds: 15),\n      ),\n      interceptors: [interceptor],\n    ),\n  );\n  interceptor.setClient(client);\n  _runWebSocketExample(client, url);\n}\n\nvoid _initializeWithoutISpect(String url) {\n  final client = WebSocketClient(\n    WebSocketOptions.common(\n      connectionRetryInterval: (\n        min: const Duration(milliseconds: 500),\n        max: const Duration(seconds: 15),\n      ),\n    ),\n  );\n  _runWebSocketExample(client, url);\n}\n\nvoid _runWebSocketExample(WebSocketClient client, String url) {\n  client\n    ..connect(url)\n    ..add('Hello WebSocket!');\n  client.stream.listen(\n    (message) {\n      print('Received: $message');\n    },\n    onError: (error) {\n      print('Error: $error');\n    },\n  );\n  Timer(const Duration(seconds: 5), () async {\n    await client.close();\n    print('Connection closed');\n    if (kEnableISpectWS) {\n      print('Metrics: ${client.metrics}');\n    }\n  });\n}\n```",
   "architecture_note": "ISpectifyWS integrates with the WebSocket client through interceptors:\n\n| Component | Description |\n|-----------|-----------|\n| **WS Interceptor** | Captures WebSocket connection events and messages |\n| **Message Logger** | Logs sent and received message details |\n| **Connection Logger** | Logs connection state and URL information |\n| **Error Handler** | Captures and logs WebSocket errors |\n| **Metrics Tracker** | Measures connection timing and message counts |",
   "custom_sections": "## Configuration Options\n\n### Basic Setup\n\n```dart\nfinal logger = ISpectify();\n\nfinal interceptor = ISpectWSInterceptor(\n  logger: logger,\n  settings: const ISpectWSInterceptorSettings(\n    enabled: true,\n    printSentData: true,\n    printReceivedData: true,\n    printReceivedMessage: true,\n    printErrorData: true,\n    printErrorMessage: true,\n    printReceivedHeaders: false,\n  ),\n);\n\nfinal client = WebSocketClient(\n  WebSocketOptions.common(\n    interceptors: [interceptor],\n  ),\n);\n\ninterceptor.setClient(client);\n```\n\n### Sensitive Data Redaction\n\nRedaction is enabled by default. Disable only with synthetic / non-sensitive data.\n\n```dart\nfinal interceptor = ISpectWSInterceptor(\n  logger: logger,\n  settings: const ISpectWSInterceptorSettings(enableRedaction: false),\n);\n\nfinal redactor = RedactionService();\nredactor.ignoreKeys(['x-debug']);\nredactor.ignoreValues(['<placeholder-token>']);\nfinal interceptor2 = ISpectWSInterceptor(\n  logger: logger,\n  redactor: redactor,\n);\n```\n\n### Filtering with Optional Predicates\n\n```dart\nfinal interceptor = ISpectWSInterceptor(\n  logger: logger,\n  settings: ISpectWSInterceptorSettings(\n    enabled: true,\n    sentFilter: (request) => request.body?['data']?.toString().contains('important') ?? false,\n    receivedFilter: (response) => !(response.body?['data']?.toString().contains('error') ?? false),\n    errorFilter: (error) => true,\n    sentPen: AnsiPen()..blue(),\n    receivedPen: AnsiPen()..green(),\n    errorPen: AnsiPen()..red(),\n  ),\n);\n```\n\n### Connection Event Handling\n\n```dart\nfinal interceptor = ISpectWSInterceptor(\n  logger: logger,\n  onClientReady: (client) {\n    print('WebSocket client is ready');\n    print('Client metrics: ${client.metrics}');\n  },\n);\n```",
   "advanced_configuration": "",
   "examples_section": "## Examples\n\nSee the [example/](example/) directory for complete integration examples with different WebSocket client configurations.",
   "related_packages": "## Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispectify_dio](../ispectify_dio) - Dio HTTP client integration\n- [ispectify_http](../ispectify_http) - HTTP client integration\n- [ispect](../ispect) - Main debugging interface\n- [ws](https://pub.dev/packages/ws) - WebSocket client package for Dart"
}