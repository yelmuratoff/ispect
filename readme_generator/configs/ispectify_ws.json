{
   "package_name": "ispectify_ws",
   "title": "ISpectify WebSocket",
   "description": "WebSocket interceptor integration for ISpectify logging system using ws package",
   "overview": "provides seamless integration between the ws package and the ISpectify logging system for comprehensive WebSocket monitoring.",
   "features": [
      "üîó **WebSocket Connection Logging**: Automatic logging of all WebSocket connections",
      "üì® **Message Tracking**: Detailed logging of sent and received messages",
      "‚ùå **Error Handling**: Comprehensive error logging with stack traces",
      "üîç **Connection Inspection**: URL, connection state, and metrics logging",
      "üîí **Sensitive Data Redaction**: Centralized redaction for sent/received payloads (enabled by default, configurable)",
      "‚ö° **Performance Metrics**: Connection timing and message count tracking",
      "üéõÔ∏è **Lightweight**: Minimal overhead using ws package interceptors"
   ],
   "custom_overview_section": "<div align=\"center\">\n\nüîó **WebSocket Logging** ‚Ä¢ üì® **Message Tracking** ‚Ä¢ ‚ùå **Error Handling** ‚Ä¢ ‚ö° **Performance**\n\n</div>\n\nEnhance your WebSocket debugging workflow by automatically capturing and logging all WebSocket client interactions using the ws package. Provides seamless integration with Dart's WebSocket client through interceptors for comprehensive connection and message monitoring.",
   "usage_example": "```dart\nimport 'dart:async';\nimport 'dart:io' as io show exit;\nimport 'package:ispectify/ispectify.dart';\nimport 'package:ispectify_ws/ispectify_ws.dart';\nimport 'package:ws/ws.dart';\n\nvoid main() {\n  const url = 'wss://echo.websocket.org';\n  final logger = ISpectify();\n\n  // Create WebSocket interceptor\n  final interceptor = ISpectWSInterceptor(\n    logger: logger,\n    settings: const ISpectWSInterceptorSettings(\n      enabled: true,\n      printSentData: true,\n      printReceivedData: true,\n      printErrorData: true,\n    ),\n  );\n\n  // Create WebSocket client with interceptor\n  final client = WebSocketClient(\n    WebSocketOptions.common(\n      connectionRetryInterval: (\n        min: const Duration(milliseconds: 500),\n        max: const Duration(seconds: 15),\n      ),\n      interceptors: [interceptor],\n    ),\n  );\n\n  // Set client for interceptor\n  interceptor.setClient(client);\n\n  // Connect and send messages - all will be automatically logged\n  client\n    ..connect(url)\n    ..add('Hello WebSocket!')\n    ..add('{\"type\": \"message\", \"data\": \"JSON data\"}');\n\n  // Listen to messages\n  client.stream.listen(\n    (message) {\n      print('Received: $message');\n    },\n    onError: (error) {\n      print('Error: $error');\n    },\n  );\n\n  // Close connection after some time\n  Timer(const Duration(seconds: 5), () async {\n    await client.close();\n    print('Connection closed');\n    print('Metrics: ${client.metrics}');\n  });\n}\n```",
   "architecture_note": "ISpectifyWS integrates with the WebSocket client through interceptors:\n\n| Component | Description |\n|-----------|-----------|\n| **WS Interceptor** | Captures WebSocket connection events and messages |\n| **Message Logger** | Logs sent and received message details |\n| **Connection Logger** | Logs connection state and URL information |\n| **Error Handler** | Captures and logs WebSocket errors |\n| **Metrics Tracker** | Measures connection timing and message counts |",
   "custom_sections": "## üîß Configuration Options\n\n### Basic Setup\n\n```dart\nfinal logger = ISpectify();\n\nfinal interceptor = ISpectWSInterceptor(\n  logger: logger,\n  settings: const ISpectWSInterceptorSettings(\n    enabled: true,\n    printSentData: true,\n    printReceivedData: true,\n    printReceivedMessage: true,\n    printErrorData: true,\n    printErrorMessage: true,\n    printReceivedHeaders: false,\n  ),\n);\n\nfinal client = WebSocketClient(\n  WebSocketOptions.common(\n    interceptors: [interceptor],\n  ),\n);\n\ninterceptor.setClient(client);\n```\n\n### Sensitive Data Redaction\n\nRedaction is enabled by default. Disable globally via settings or provide a custom redactor.\n\n```dart\n// Disable redaction\nfinal interceptor = ISpectWSInterceptor(\n  logger: logger,\n  settings: const ISpectWSInterceptorSettings(enableRedaction: false),\n);\n\n// Provide a custom redactor\nfinal redactor = RedactionService();\nredactor.ignoreKeys(['x-debug']);\nredactor.ignoreValues(['sample-token']);\nfinal interceptor2 = ISpectWSInterceptor(\n  logger: logger,\n  redactor: redactor,\n);\n```\n\n### Advanced Configuration with Filters\n\n```dart\nfinal interceptor = ISpectWSInterceptor(\n  logger: logger,\n  settings: ISpectWSInterceptorSettings(\n    enabled: true,\n    sentFilter: (request) {\n      return request.body?['data']?.toString().contains('important') ?? false;\n    },\n    receivedFilter: (response) {\n      return !response.body?['data']?.toString().contains('error') ?? true;\n    },\n    errorFilter: (error) {\n      return true;\n    },\n    sentPen: AnsiPen()..blue(),\n    receivedPen: AnsiPen()..green(),\n    errorPen: AnsiPen()..red(),\n  ),\n);\n```\n\n### Connection Event Handling\n\n```dart\nfinal interceptor = ISpectWSInterceptor(\n  logger: logger,\n  onClientReady: (client) {\n    print('WebSocket client is ready');\n    print('Client metrics: ${client.metrics}');\n  },\n);\n```",
   "advanced_configuration": "",
   "examples_section": "## üìö Examples\n\nSee the [example/](example/) directory for complete integration examples with different WebSocket client configurations.",
   "related_packages": "## üîó Related Packages\n\n- [ispectify](../ispectify) - Foundation logging system\n- [ispectify_dio](../ispectify_dio) - Dio HTTP client integration\n- [ispectify_http](../ispectify_http) - HTTP client integration\n- [ispect](../ispect) - Main debugging interface\n- [ws](https://pub.dev/packages/ws) - WebSocket client package for Dart"
}